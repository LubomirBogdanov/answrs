
./debug/main.o:     file format elf32-microblazeel


Disassembly of section .text:

00000000 <start_of_heap_get>:
#include "uart.h"
#include "print.h"
#include "sleep.h"
#include "autoconf.h"

unsigned long start_of_heap_get(void){
   0:	3021fff8 	addik	r1, r1, -8
   4:	fa610004 	swi	r19, r1, 4
   8:	12610000 	addk	r19, r1, r0
	extern uint32_t _heap_start; /* Defined by the linker */
	return (unsigned long)&_heap_start;
   c:	b0000000 	imm	0
  10:	30600000 	addik	r3, r0, 0
}
  14:	10330000 	addk	r1, r19, r0
  18:	ea610004 	lwi	r19, r1, 4
  1c:	30210008 	addik	r1, r1, 8
  20:	b60f0008 	rtsd	r15, 8
  24:	80000000 	or	r0, r0, r0

00000028 <main>:

int main(void){
  28:	3021ff9c 	addik	r1, r1, -100
  2c:	f9e10000 	swi	r15, r1, 0
  30:	fa610060 	swi	r19, r1, 96
  34:	12610000 	addk	r19, r1, r0
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  38:	b0000000 	imm	0
  3c:	e98000a4 	lwi	r12, r0, 164
  40:	b0000000 	imm	0
  44:	e96000a8 	lwi	r11, r0, 168
  48:	b0000000 	imm	0
  4c:	e94000ac 	lwi	r10, r0, 172
  50:	b0000000 	imm	0
  54:	e92000b0 	lwi	r9, r0, 176
  58:	b0000000 	imm	0
  5c:	e90000b4 	lwi	r8, r0, 180
  60:	b0000000 	imm	0
  64:	e8e000b8 	lwi	r7, r0, 184
  68:	b0000000 	imm	0
  6c:	e8c000bc 	lwi	r6, r0, 188
  70:	b0000000 	imm	0
  74:	e8a000c0 	lwi	r5, r0, 192
  78:	b0000000 	imm	0
  7c:	e88000c4 	lwi	r4, r0, 196
  80:	b0000000 	imm	0
  84:	e86000c8 	lwi	r3, r0, 200
  88:	f993002c 	swi	r12, r19, 44
  8c:	f9730030 	swi	r11, r19, 48
  90:	f9530034 	swi	r10, r19, 52
  94:	f9330038 	swi	r9, r19, 56
  98:	f913003c 	swi	r8, r19, 60
  9c:	f8f30040 	swi	r7, r19, 64
  a0:	f8d30044 	swi	r6, r19, 68
  a4:	f8b30048 	swi	r5, r19, 72
  a8:	f893004c 	swi	r4, r19, 76
  ac:	f8730050 	swi	r3, r19, 80
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  b0:	b0000000 	imm	0
  b4:	e88000cc 	lwi	r4, r0, 204
  b8:	b0000000 	imm	0
  bc:	e86000d0 	lwi	r3, r0, 208
  c0:	f8930054 	swi	r4, r19, 84
  c4:	f8730058 	swi	r3, r19, 88
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  c8:	b000efbe 	imm	-4162
  cc:	3060adde 	addik	r3, r0, -21026
  d0:	f873005c 	swi	r3, r19, 92
	uint32_t *dynamic_arr_1;
	uint16_t *dynamic_arr_2;
	uint8_t *dynamic_arr_3;
	int i;
	
    led_init();
  d4:	b0000000 	imm	0
  d8:	b9f40000 	brlid	r15, 0
  dc:	80000000 	or	r0, r0, r0
    uart_init();
  e0:	b0000000 	imm	0
  e4:	b9f40000 	brlid	r15, 0
  e8:	80000000 	or	r0, r0, r0

	printf("The start of the HEAP segment: 0x%08X\n\r", start_of_heap_get());
  ec:	b9f4ff14 	brlid	r15, -236	// 0 <start_of_heap_get>
  f0:	80000000 	or	r0, r0, r0
  f4:	10c30000 	addk	r6, r3, r0
  f8:	b0000000 	imm	0
  fc:	30a00000 	addik	r5, r0, 0
 100:	b0000000 	imm	0
 104:	b9f40000 	brlid	r15, 0
 108:	80000000 	or	r0, r0, r0

	dynamic_arr_1 = (uint32_t *)malloc(sizeof(uint32_t)*10);
 10c:	30a00028 	addik	r5, r0, 40	// 28 <main>
 110:	b0000000 	imm	0
 114:	b9f40000 	brlid	r15, 0
 118:	80000000 	or	r0, r0, r0
 11c:	f8730020 	swi	r3, r19, 32

	for(i = 0; i < 10; i++){
 120:	f813001c 	swi	r0, r19, 28
 124:	b800003c 	bri	60		// 160
		dynamic_arr_1[i] = static_arr_1[i];
 128:	e873001c 	lwi	r3, r19, 28
 12c:	64630402 	bslli	r3, r3, 2
 130:	e8930020 	lwi	r4, r19, 32
 134:	10641800 	addk	r3, r4, r3
 138:	e893001c 	lwi	r4, r19, 28
 13c:	64840402 	bslli	r4, r4, 2
 140:	30b3001c 	addik	r5, r19, 28
 144:	10852000 	addk	r4, r5, r4
 148:	30840010 	addik	r4, r4, 16
 14c:	e8840000 	lwi	r4, r4, 0
 150:	f8830000 	swi	r4, r3, 0
	for(i = 0; i < 10; i++){
 154:	e873001c 	lwi	r3, r19, 28
 158:	30630001 	addik	r3, r3, 1
 15c:	f873001c 	swi	r3, r19, 28
 160:	e893001c 	lwi	r4, r19, 28
 164:	30600009 	addik	r3, r0, 9
 168:	16441801 	cmp	r18, r4, r3
 16c:	bcb2ffbc 	bgei	r18, -68		// 128
	}

	dynamic_arr_2 = (uint16_t *)malloc(sizeof(uint16_t)*4);
 170:	30a00008 	addik	r5, r0, 8
 174:	b0000000 	imm	0
 178:	b9f40000 	brlid	r15, 0
 17c:	80000000 	or	r0, r0, r0
 180:	f8730024 	swi	r3, r19, 36

	for(i = 0; i < 4; i++){
 184:	f813001c 	swi	r0, r19, 28
 188:	b800003c 	bri	60		// 1c4
		dynamic_arr_2[i] = static_arr_2[i];
 18c:	e873001c 	lwi	r3, r19, 28
 190:	10631800 	addk	r3, r3, r3
 194:	e8930024 	lwi	r4, r19, 36
 198:	10641800 	addk	r3, r4, r3
 19c:	e893001c 	lwi	r4, r19, 28
 1a0:	10842000 	addk	r4, r4, r4
 1a4:	30b3001c 	addik	r5, r19, 28
 1a8:	10852000 	addk	r4, r5, r4
 1ac:	30840038 	addik	r4, r4, 56
 1b0:	e4840000 	lhui	r4, r4, 0
 1b4:	f4830000 	shi	r4, r3, 0
	for(i = 0; i < 4; i++){
 1b8:	e873001c 	lwi	r3, r19, 28
 1bc:	30630001 	addik	r3, r3, 1
 1c0:	f873001c 	swi	r3, r19, 28
 1c4:	e893001c 	lwi	r4, r19, 28
 1c8:	30600003 	addik	r3, r0, 3
 1cc:	16441801 	cmp	r18, r4, r3
 1d0:	bcb2ffbc 	bgei	r18, -68		// 18c
	}

	printf("\n dynamic_arr_1[ ] = {\n\r");
 1d4:	b0000000 	imm	0
 1d8:	30a00028 	addik	r5, r0, 40	// 28 <main>
 1dc:	b0000000 	imm	0
 1e0:	b9f40000 	brlid	r15, 0
 1e4:	80000000 	or	r0, r0, r0
	for(i = 0; i < 10; i++){
 1e8:	f813001c 	swi	r0, r19, 28
 1ec:	b800003c 	bri	60		// 228
		printf("0x%08X\n\r", dynamic_arr_1[i]);
 1f0:	e873001c 	lwi	r3, r19, 28
 1f4:	64630402 	bslli	r3, r3, 2
 1f8:	e8930020 	lwi	r4, r19, 32
 1fc:	10641800 	addk	r3, r4, r3
 200:	e8630000 	lwi	r3, r3, 0
 204:	10c30000 	addk	r6, r3, r0
 208:	b0000000 	imm	0
 20c:	30a00044 	addik	r5, r0, 68
 210:	b0000000 	imm	0
 214:	b9f40000 	brlid	r15, 0
 218:	80000000 	or	r0, r0, r0
	for(i = 0; i < 10; i++){
 21c:	e873001c 	lwi	r3, r19, 28
 220:	30630001 	addik	r3, r3, 1
 224:	f873001c 	swi	r3, r19, 28
 228:	e893001c 	lwi	r4, r19, 28
 22c:	30600009 	addik	r3, r0, 9
 230:	16441801 	cmp	r18, r4, r3
 234:	bcb2ffbc 	bgei	r18, -68		// 1f0
	}
	printf("}\n\r");
 238:	b0000000 	imm	0
 23c:	30a00050 	addik	r5, r0, 80
 240:	b0000000 	imm	0
 244:	b9f40000 	brlid	r15, 0
 248:	80000000 	or	r0, r0, r0

	printf("\n dynamic_arr_2[ ] = {\n\r");
 24c:	b0000000 	imm	0
 250:	30a00054 	addik	r5, r0, 84
 254:	b0000000 	imm	0
 258:	b9f40000 	brlid	r15, 0
 25c:	80000000 	or	r0, r0, r0
	for(i = 0; i < 4; i++){
 260:	f813001c 	swi	r0, r19, 28
 264:	b8000044 	bri	68		// 2a8
		printf("0x%04X\n\r", dynamic_arr_2[i]);
 268:	e873001c 	lwi	r3, r19, 28
 26c:	10631800 	addk	r3, r3, r3
 270:	e8930024 	lwi	r4, r19, 36
 274:	10641800 	addk	r3, r4, r3
 278:	e4630000 	lhui	r3, r3, 0
 27c:	b0000000 	imm	0
 280:	a463ffff 	andi	r3, r3, -1
 284:	10c30000 	addk	r6, r3, r0
 288:	b0000000 	imm	0
 28c:	30a00070 	addik	r5, r0, 112
 290:	b0000000 	imm	0
 294:	b9f40000 	brlid	r15, 0
 298:	80000000 	or	r0, r0, r0
	for(i = 0; i < 4; i++){
 29c:	e873001c 	lwi	r3, r19, 28
 2a0:	30630001 	addik	r3, r3, 1
 2a4:	f873001c 	swi	r3, r19, 28
 2a8:	e893001c 	lwi	r4, r19, 28
 2ac:	30600003 	addik	r3, r0, 3
 2b0:	16441801 	cmp	r18, r4, r3
 2b4:	bcb2ffb4 	bgei	r18, -76		// 268
	}
	printf("}\n\r");
 2b8:	b0000000 	imm	0
 2bc:	30a00050 	addik	r5, r0, 80
 2c0:	b0000000 	imm	0
 2c4:	b9f40000 	brlid	r15, 0
 2c8:	80000000 	or	r0, r0, r0

	free(dynamic_arr_1);
 2cc:	e8b30020 	lwi	r5, r19, 32
 2d0:	b0000000 	imm	0
 2d4:	b9f40000 	brlid	r15, 0
 2d8:	80000000 	or	r0, r0, r0

	dynamic_arr_3 = (uint8_t *)malloc(sizeof(uint16_t)*4);
 2dc:	30a00008 	addik	r5, r0, 8
 2e0:	b0000000 	imm	0
 2e4:	b9f40000 	brlid	r15, 0
 2e8:	80000000 	or	r0, r0, r0
 2ec:	f8730028 	swi	r3, r19, 40

	for(i = 0; i < 4; i++){
 2f0:	f813001c 	swi	r0, r19, 28
 2f4:	b8000030 	bri	48		// 324
		dynamic_arr_3[i] = static_arr_3[i];
 2f8:	e873001c 	lwi	r3, r19, 28
 2fc:	e8930028 	lwi	r4, r19, 40
 300:	10641800 	addk	r3, r4, r3
 304:	30b3005c 	addik	r5, r19, 92
 308:	e893001c 	lwi	r4, r19, 28
 30c:	10852000 	addk	r4, r5, r4
 310:	e0840000 	lbui	r4, r4, 0
 314:	f0830000 	sbi	r4, r3, 0
	for(i = 0; i < 4; i++){
 318:	e873001c 	lwi	r3, r19, 28
 31c:	30630001 	addik	r3, r3, 1
 320:	f873001c 	swi	r3, r19, 28
 324:	e893001c 	lwi	r4, r19, 28
 328:	30600003 	addik	r3, r0, 3
 32c:	16441801 	cmp	r18, r4, r3
 330:	bcb2ffc8 	bgei	r18, -56		// 2f8
	}

	printf("\n dynamic_arr_3[ ] = {\n\r");
 334:	b0000000 	imm	0
 338:	30a0007c 	addik	r5, r0, 124
 33c:	b0000000 	imm	0
 340:	b9f40000 	brlid	r15, 0
 344:	80000000 	or	r0, r0, r0
	for(i = 0; i < 4; i++){
 348:	f813001c 	swi	r0, r19, 28
 34c:	b800003c 	bri	60		// 388
		printf("0x%02X\n\r", dynamic_arr_3[i]);
 350:	e873001c 	lwi	r3, r19, 28
 354:	e8930028 	lwi	r4, r19, 40
 358:	10641800 	addk	r3, r4, r3
 35c:	e0630000 	lbui	r3, r3, 0
 360:	a46300ff 	andi	r3, r3, 255
 364:	10c30000 	addk	r6, r3, r0
 368:	b0000000 	imm	0
 36c:	30a00098 	addik	r5, r0, 152
 370:	b0000000 	imm	0
 374:	b9f40000 	brlid	r15, 0
 378:	80000000 	or	r0, r0, r0
	for(i = 0; i < 4; i++){
 37c:	e873001c 	lwi	r3, r19, 28
 380:	30630001 	addik	r3, r3, 1
 384:	f873001c 	swi	r3, r19, 28
 388:	e893001c 	lwi	r4, r19, 28
 38c:	30600003 	addik	r3, r0, 3
 390:	16441801 	cmp	r18, r4, r3
 394:	bcb2ffbc 	bgei	r18, -68		// 350
	}
	printf("}\n\r");
 398:	b0000000 	imm	0
 39c:	30a00050 	addik	r5, r0, 80
 3a0:	b0000000 	imm	0
 3a4:	b9f40000 	brlid	r15, 0
 3a8:	80000000 	or	r0, r0, r0

	free(dynamic_arr_2);
 3ac:	e8b30024 	lwi	r5, r19, 36
 3b0:	b0000000 	imm	0
 3b4:	b9f40000 	brlid	r15, 0
 3b8:	80000000 	or	r0, r0, r0
	free(dynamic_arr_3);
 3bc:	e8b30028 	lwi	r5, r19, 40
 3c0:	b0000000 	imm	0
 3c4:	b9f40000 	brlid	r15, 0
 3c8:	80000000 	or	r0, r0, r0

	while (1){
        	led_set();
 3cc:	b0000000 	imm	0
 3d0:	b9f40000 	brlid	r15, 0
 3d4:	80000000 	or	r0, r0, r0
       	usleep(1000000);
 3d8:	b000000f 	imm	15
 3dc:	30a04240 	addik	r5, r0, 16960
 3e0:	b0000000 	imm	0
 3e4:	b9f40000 	brlid	r15, 0
 3e8:	80000000 	or	r0, r0, r0
        	led_clear();
 3ec:	b0000000 	imm	0
 3f0:	b9f40000 	brlid	r15, 0
 3f4:	80000000 	or	r0, r0, r0
        	usleep(1000000);
 3f8:	b000000f 	imm	15
 3fc:	30a04240 	addik	r5, r0, 16960
 400:	b0000000 	imm	0
 404:	b9f40000 	brlid	r15, 0
 408:	80000000 	or	r0, r0, r0
        	led_set();
 40c:	b800ffc0 	bri	-64		// 3cc

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	20656854 	addi	r3, r5, 26708
   4:	72617473 		r19, r1, r14
   8:	666f2074 	bslrli	r19, r15, 52
   c:	65687420 	bslefi	r11, r8, 16, 32
  10:	41454820 		r10, r5, r9
  14:	65732050 	bslrli	r11, r19, 16
  18:	6e656d67 	necaget	r19, rfsl7
  1c:	30203a74 	addik	r1, r0, 14964
  20:	38302578 	addikc	r1, r16, 9592
  24:	000d0a58 		r0, r13, r1
  28:	7964200a 		r11, r4, r4
  2c:	696d616e 		r11, r13, r12
  30:	72615f63 		r19, r1, r11
  34:	5b315f72 		r25, r17, r11
  38:	3d205d20 	rsubikc	r9, r0, 23840
  3c:	0d0a7b20 		r8, r10, r15
  40:	
Disassembly of section .debug_frame:

00000000 <.debug_frame>:
unsigned long start_of_heap_get(void){
   0:	0000000c 		r0, r0, r0
   4:	ffffffff 	sli	r31, r31, -1
   8:	7f010003 		r24, r1, r0
	return (unsigned long)&_heap_start;
   c:	00010c0f 		r0, r1, r1
  10:	00000024 		r0, r0, r0
	...
}
  1c:	00000028 		r0, r0, r0
  20:	00000404 		r0, r0, r0
  24:	04080e00 	neg	r0, r8
int main(void){
  28:	00000004 		r0, r0, r0
  2c:	04040493 	neg	r0, r4
  30:	0d000000 	rsubc	r8, r0, r0
  34:	00000013 		r0, r0, r0
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  38:	00000024 		r0, r0, r0
  3c:	
Disassembly of section .debug_info:

00000000 <.debug_info>:
unsigned long start_of_heap_get(void){
   0:	0000024c 		r0, r0, r0
   4:	04010005 	neg	r0, r1
   8:	
Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	0b002401 		r24, r0, r4
   4:	030b3e0b 		r24, r11, r7
   8:	0200000e 		r16, r0, r0
	return (unsigned long)&_heap_start;
   c:	0e030016 		r16, r3, r0
  10:	0b3b0b3a 		r25, r27, r1
}
  14:	13490b39 		r26, r9, r1
  18:	26030000 	rsubi	r16, r3, 0
  1c:	00134900 	addl	r0, r19, r9
  20:	00340400 		r1, r20, r0
  24:	213a0e03 	addi	r9, r26, 3587
int main(void){
  28:	390b3b01 	addikc	r8, r11, 15105
  2c:	0213490b 		r16, r19, r9
  30:	05000018 	neg	r8, r0
  34:	210b000f 	addi	r8, r11, 15
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  38:	00134904 		r0, r19, r9
  3c:	002e0600 		r1, r14, r0
  40:	0e03193f 		r16, r3, r3
  44:	0b3b0b3a 		r25, r27, r1
  48:	27062139 	rsubi	r24, r6, 8505
  4c:	00193c19 		r0, r25, r7
  50:	00050700 		r0, r5, r0
  54:	00001349 		r0, r0, r2
  58:	49010108 		r8, r1, r0
  5c:	00130113 		r0, r19, r0
  60:	00210900 	addl	r1, r1, r1
  64:	0b2f1349 		r25, r15, r2
  68:	2e0a0000 	rsubic	r16, r10, 0
  6c:	03193f01 		r24, r25, r7
  70:	3b0b3a0e 	addikc	r24, r11, 14862
  74:	0621390b 	neg	r17, r1
  78:	193c1927 		r9, r28, r3
  7c:	00001301 		r0, r0, r2
  80:	3f012e0b 	rsubikc	r24, r1, 11787
  84:	3a0e0319 	addikc	r16, r14, 793
  88:	390b3b0b 	addikc	r8, r11, 15115
  8c:	4919270b 		r8, r25, r4
  90:	01193c13 		r8, r25, r7
  94:	0c000013 		r0, r0, r0
  98:	0e250111 		r17, r5, r0
  9c:	1f030b13 		r24, r3, r1
  a0:	01111f1b 		r8, r17, r3
  a4:	17100612 		r24, r16, r0
  a8:	240d0000 	rsubi	r0, r13, 0
  ac:	3e0b0b00 	rsubikc	r16, r11, 2816
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  b0:	0008030b 		r0, r8, r0
  b4:	000f0e00 		r0, r15, r1
  b8:	00000b0b 		r0, r0, r1
  bc:	0000180f 		r0, r0, r3
  c0:	012e1000 	add	r9, r14, r2
  c4:	0e03193f 		r16, r3, r3
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  c8:	0b3b0b3a 		r25, r27, r1
  cc:	19270b39 		r9, r7, r1
  d0:	01111349 		r8, r17, r2
    led_init();
  d4:	18400612 		r2, r0, r0
  d8:	1301197c 		r24, r1, r3
  dc:	34110000 	rsubik	r0, r17, 0
    uart_init();
  e0:	3a080300 	addikc	r16, r8, 768
  e4:	390b3b0b 	addikc	r8, r11, 15115
  e8:	0213490b 		r16, r19, r9
	printf("The start of the HEAP segment: 0x%08X\n\r", start_of_heap_get());
  ec:	12000018 		r16, r0, r0
  f0:	193f012e 		r9, r31, r0
  f4:	0b3a0e03 		r25, r26, r1
  f8:	0b390b3b 		r25, r25, r1
  fc:	13491927 		r26, r9, r3
 100:	06120111 	neg	r16, r18
 104:	197a1840 		r11, r26, r3
 108:	34130000 	rsubik	r0, r19, 0
	dynamic_arr_1 = (uint32_t *)malloc(sizeof(uint32_t)*10);
 10c:	3a0e0300 	addikc	r16, r14, 768
 110:	390b3b0b 	addikc	r8, r11, 15115
 114:	3f13490b 	rsubikc	r24, r19, 18699
 118:	00193c19 		r0, r25, r7
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
unsigned long start_of_heap_get(void){
   0:	0000001c 		r0, r0, r0
   4:	00000002 		r0, r0, r0
   8:	00040000 	add	r0, r4, r0
	...
}
  14:	00000410 		r0, r0, r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
unsigned long start_of_heap_get(void){
   0:	00000369 		r0, r0, r0
   4:	00040005 		r0, r4, r0
   8:	00000077 		r0, r0, r0
	return (unsigned long)&_heap_start;
   c:	f6010101 	shi	r16, r1, 257
  10:	01000df2 		r8, r0, r1
}
  14:	00010101 		r0, r1, r0
  18:	00010000 	add	r0, r1, r0
  1c:	01010100 	addl	r8, r1, r0
  20:	01ac091f 		r13, r12, r1
  24:	01280000 	add	r9, r8, r0
int main(void){
  28:	01dd0000 	add	r14, r29, r0
  2c:	01e10000 	add	r15, r1, r0
  30:	013c0000 	add	r9, r28, r0
  34:	000a0000 	add	r0, r10, r0
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  38:	00740000 	add	r3, r20, r0
  3c:	01340000 	add	r9, r20, r0
  40:	006e0000 	add	r3, r14, r0
  44:	01020000 	add	r8, r2, r0
  48:	0b0b021f 		r24, r11, r0
  4c:	0000012d 		r0, r0, r0
  50:	00012d00 		r0, r1, r5
  54:	026e0000 	add	r19, r14, r0
  58:	54060000 		r0, r6, r0
  5c:	03000002 		r24, r0, r0
  60:	
Disassembly of section .debug_str:

00000000 <.debug_str>:
unsigned long start_of_heap_get(void){
   0:	69755f5f 		r11, r21, r11
   4:	5f38746e 		r25, r24, r14
   8:	69730074 	andnli	r11, 116
	return (unsigned long)&_heap_start;
   c:	745f657a 		r2, r31, r12
  10:	554e4700 		r10, r14, r8
}
  14:	37314320 	rsubik	r25, r17, 17184
  18:	2e313120 	rsubic	r17, r17, 12576
  1c:	20302e32 	addi	r1, r16, 11826
  20:	61686d2d 	muli	r11, r8, 27949
  24:	662d6472 	bslefi	r17, r13, 17, 50
int main(void){
  28:	74616f6c 		r3, r1, r13
  2c:	786d2d20 		r3, r13, r5
  30:	6c662d6c 	ecaget	r3, rfsl12
  34:	2d74616f 	rsubic	r11, r20, 24943
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  38:	766e6f63 		r19, r14, r13
  3c:	20747265 	addi	r3, r20, 29285
  40:	6c786d2d 	necaget	r3, rfsl13
  44:	6f6c662d 	necget	r27, rfsl13
  48:	732d7461 		r25, r13, r14
  4c:	20747271 	addi	r3, r20, 29297
  50:	696c6d2d 		r11, r12, r13
  54:	656c7474 	bslefi	r11, r12, 17, 52
  58:	646e652d 	bslefi	r3, r14, 20, 45
  5c:	206e6169 	addi	r3, r14, 24937
  60:	6c786d2d 	necaget	r3, rfsl13
  64:	7261622d 		r19, r1, r12
  68:	2d6c6572 	rsubic	r11, r12, 25970
  6c:	66696873 	bslefi	r19, r9, 33, 51
  70:	6d2d2074 	cget	r9, rfsl4
  74:	702d6c78 		r1, r13, r13
  78:	65747461 	bslefi	r11, r20, 17, 33
  7c:	632d6e72 	muli	r25, r13, 28274
  80:	61706d6f 	muli	r11, r16, 28015
  84:	2d206572 	rsubic	r9, r0, 25970
  88:	7570636d 		r11, r16, r12
  8c:	3131763d 	addik	r9, r17, 30269
  90:	2d20302e 	rsubic	r9, r0, 12334
  94:	2d6f6e6d 	rsubic	r11, r15, 28269
  98:	732d6c78 		r25, r13, r13
  9c:	2d74666f 	rsubic	r11, r20, 26223
  a0:	206c756d 	addi	r3, r12, 30061
  a4:	2d20672d 	rsubic	r9, r0, 26413
  a8:	7500304f 		r8, r0, r6
  ac:	38746e69 	addikc	r3, r20, 28265
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  b0:	6c00745f 	tnecget	r0, rfsl15
  b4:	695f6465 		r10, r31, r12
  b8:	0074696e 		r3, r20, r13
  bc:	656c7375 	bslefi	r11, r12, 13, 53
  c0:	75007065 		r8, r0, r14
  c4:	5f747261 		r27, r20, r14
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  c8:	74696e69 		r3, r9, r13
  cc:	64656c00 	bslefi	r3, r5, 48, 0
  d0:	7465735f 		r3, r5, r14
    led_init();
  d4:	736e7500 		r27, r14, r14
  d8:	656e6769 	bslefi	r11, r14, 29, 41
  dc:	68632064 	rsublic	r3, 8292
    uart_init();
  e0:	73007261 		r24, r0, r14
  e4:	69746174 		r11, r20, r12
  e8:	72615f63 		r19, r1, r11
	printf("The start of the HEAP segment: 0x%08X\n\r", start_of_heap_get());
  ec:	00335f72 		r1, r19, r11
  f0:	676e6f6c 	bslefi	r27, r14, 61, 44
  f4:	736e7520 		r27, r14, r14
  f8:	656e6769 	bslefi	r11, r14, 29, 41
  fc:	6e692064 	cget	r19, rfsl4
 100:	68730074 	andnli	r3, 116
 104:	2074726f 	addi	r3, r20, 29295
 108:	69736e75 	andnli	r11, 28277
	dynamic_arr_1 = (uint32_t *)malloc(sizeof(uint32_t)*10);
 10c:	64656e67 	bslefi	r3, r5, 57, 39
 110:	746e6920 		r3, r14, r13
 114:	755f5f00 		r10, r31, r11
 118:	31746e69 	addik	r11, r20, 28265
 11c:	00745f36 		r3, r20, r11
	for(i = 0; i < 10; i++){
 120:	5f64656c 		r27, r4, r12
 124:	61656c63 	muli	r11, r5, 27747
		dynamic_arr_1[i] = static_arr_1[i];
 128:	5f5f0072 		r26, r31, r0
 12c:	746e6975 		r3, r14, r13
 130:	745f3233 		r2, r31, r6
 134:	69616d00 	rsubli	r11, 27904
 138:	7473006e 		r3, r19, r0
 13c:	5f747261 		r27, r20, r14
 140:	685f666f 		r2, r31, r12
 144:	5f706165 		r27, r16, r12
 148:	00746567 		r3, r20, r12
 14c:	69736e75 	andnli	r11, 28277
 150:	64656e67 	bslefi	r3, r5, 57, 39
	for(i = 0; i < 10; i++){
 154:	746e6920 		r3, r14, r13
 158:	6e6f6c00 	necaget	r19, rfsl0
 15c:	6f6c2067 	cget	r27, rfsl7
 160:	7520676e 		r9, r0, r12
 164:	6769736e 	bslefi	r27, r9, 13, 46
 168:	2064656e 	addi	r3, r4, 25966
 16c:	00746e69 		r3, r20, r13
	dynamic_arr_2 = (uint16_t *)malloc(sizeof(uint16_t)*4);
 170:	6165685f 	muli	r11, r5, 26719
 174:	74735f70 		r3, r19, r11
 178:	00747261 		r3, r20, r14
 17c:	616e7964 	muli	r11, r14, 31076
 180:	5f63696d 		r27, r3, r13
	for(i = 0; i < 4; i++){
 184:	5f727261 		r27, r18, r14
 188:	79640031 		r11, r4, r0
		dynamic_arr_2[i] = static_arr_2[i];
 18c:	696d616e 		r11, r13, r12
 190:	72615f63 		r19, r1, r11
 194:	00325f72 		r1, r18, r11
 198:	616e7964 	muli	r11, r14, 31076
 19c:	5f63696d 		r27, r3, r13
 1a0:	5f727261 		r27, r18, r14
 1a4:	72660033 		r19, r6, r0
 1a8:	6c006565 	necget	r0, rfsl5
 1ac:	20676e6f 	addi	r3, r7, 28271
 1b0:	676e6f6c 	bslefi	r27, r14, 61, 44
 1b4:	746e6920 		r3, r14, r13
	for(i = 0; i < 4; i++){
 1b8:	61686300 	muli	r11, r8, 25344
 1bc:	72700072 		r19, r16, r0
 1c0:	66746e69 	bslefi	r19, r20, 57, 41
 1c4:	6873005f 	andnli	r3, 95
 1c8:	2074726f 	addi	r3, r20, 29295
 1cc:	00746e69 		r3, r20, r13
 1d0:	746e6975 		r3, r14, r13
	printf("\n dynamic_arr_1[ ] = {\n\r");
 1d4:	745f3631 		r2, r31, r6
 1d8:	4f4c5500 	cputd	r12, r10
 1dc:	7500474e 		r8, r0, r8
 1e0:	33746e69 	addik	r27, r20, 28265
 1e4:	00745f32 		r3, r20, r11
	for(i = 0; i < 10; i++){
 1e8:	676e6f6c 	bslefi	r27, r14, 61, 44
 1ec:	746e6920 		r3, r14, r13
		printf("0x%08X\n\r", dynamic_arr_1[i]);
 1f0:	6e6f6c00 	necaget	r19, rfsl0
 1f4:	6f642067 	cget	r27, rfsl7
 1f8:	656c6275 	bslefi	r11, r12, 9, 53
 1fc:	61747300 	muli	r11, r20, 29440
 200:	5f636974 		r27, r3, r13
 204:	5f727261 		r27, r18, r14
 208:	69730031 	andnli	r11, 49
 20c:	64656e67 	bslefi	r3, r5, 57, 39
 210:	61686320 	muli	r11, r8, 25376
 214:	74730072 		r3, r19, r0
 218:	63697461 	muli	r27, r9, 29793
	for(i = 0; i < 10; i++){
 21c:	7272615f 		r19, r18, r12
 220:	6d00325f 	tcget	r8, rfsl15
 224:	6f6c6c61 	necaget	r27, rfsl1
 228:	Address 0x0000000000000228 is out of bounds.


Disassembly of section .debug_line_str:

00000000 <.debug_line_str>:
unsigned long start_of_heap_get(void){
   0:	6474735f 	bslefi	r3, r20, 13, 31
   4:	2e746e69 	rsubic	r19, r20, 28265
   8:	682f0068 		r1, r15, r0
	return (unsigned long)&_heap_start;
   c:	2f656d6f 	rsubic	r27, r5, 28015
  10:	676f626c 	bslefi	r27, r15, 9, 44
}
  14:	6f6e6164 	ncget	r27, rfsl4
  18:	72702f76 		r19, r16, r5
  1c:	6172676f 	muli	r11, r18, 26479
  20:	782f736d 		r1, r15, r14
  24:	6e696c69 	necaget	r19, rfsl9
int main(void){
  28:	69562f78 		r10, r22, r5
  2c:	2f736974 	rsubic	r27, r19, 26996
  30:	32323032 	addik	r17, r18, 12338
  34:	672f322e 	bslrai	r25, r15, 46
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  38:	6d2f756e 	tnecget	r9, rfsl14
  3c:	6f726369 	ncget	r27, rfsl9
  40:	7a616c62 		r19, r1, r13
  44:	696c2f65 		r11, r12, r5
  48:	696d2f6e 		r11, r13, r5
  4c:	626f7263 	muli	r19, r15, 29283
  50:	657a616c 	bslefi	r11, r26, 5, 44
  54:	782d6265 		r1, r13, r12
  58:	6e696c69 	necaget	r19, rfsl9
  5c:	6c652d78 	ecaget	r3, rfsl8
  60:	73752f66 		r27, r21, r5
  64:	6e692f72 	ecaget	r19, rfsl2
  68:	64756c63 	bslefi	r3, r21, 49, 35
  6c:	72700065 		r19, r16, r0
  70:	00746e69 		r3, r20, r13
  74:	6d6f682f 	ncaget	r11, rfsl15
  78:	626c2f65 	muli	r19, r12, 12133
  7c:	6164676f 	muli	r11, r4, 26479
  80:	2f766f6e 	rsubic	r27, r22, 28526
  84:	676f7270 	bslefi	r27, r15, 9, 48
  88:	736d6172 		r27, r13, r12
  8c:	6c69782f 	tncaget	r3, rfsl15
  90:	2f786e69 	rsubic	r27, r24, 28265
  94:	69746956 		r11, r20, r13
  98:	30322f73 	addik	r1, r18, 12147
  9c:	322e3232 	addik	r17, r14, 12850
  a0:	756e672f 		r11, r14, r12
  a4:	63696d2f 	muli	r27, r9, 27951
  a8:	6c626f72 	necaget	r3, rfsl2
  ac:	2f657a61 	rsubic	r27, r5, 31329
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  b0:	2f6e696c 	rsubic	r27, r14, 26988
  b4:	5f363878 		r25, r22, r7
  b8:	6f2d3436 	tecget	r25, rfsl6
  bc:	6b647365 	addlik	r27, 29541
  c0:	6e696c2d 	necaget	r19, rfsl13
  c4:	752f7875 		r9, r15, r15
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  c8:	6c2f7273 	tncget	r1, rfsl3
  cc:	6d2f6269 	ncget	r9, rfsl9
  d0:	6f726369 	ncget	r27, rfsl9
    led_init();
  d4:	7a616c62 		r19, r1, r13
  d8:	69782d65 		r11, r24, r5
  dc:	786e696c 		r3, r14, r13
    uart_init();
  e0:	666c652d 	bslefi	r19, r12, 20, 45
  e4:	6363672f 	muli	r27, r3, 26415
  e8:	63696d2f 	muli	r27, r9, 27951
	printf("The start of the HEAP segment: 0x%08X\n\r", start_of_heap_get());
  ec:	6c626f72 	necaget	r3, rfsl2
  f0:	2d657a61 	rsubic	r11, r5, 31329
  f4:	696c6978 		r11, r12, r13
  f8:	652d786e 	bslefi	r9, r13, 33, 46
  fc:	312f666c 	addik	r9, r15, 26220
 100:	2e322e31 	rsubic	r17, r18, 11825
 104:	6e692f30 	ecaget	r19, rfsl0
 108:	64756c63 	bslefi	r3, r21, 49, 35
	dynamic_arr_1 = (uint32_t *)malloc(sizeof(uint32_t)*10);
 10c:	656c0065 	bsrli	r11, r12, 37
 110:	00682e64 		r3, r8, r5
 114:	5f6c6978 		r27, r12, r13
 118:	65707974 	bslefi	r11, r16, 37, 52
 11c:	00682e73 		r3, r8, r5
	for(i = 0; i < 10; i++){
 120:	6e697270 	tncget	r19, rfsl0
 124:	00682e74 		r3, r8, r5
		dynamic_arr_1[i] = static_arr_1[i];
 128:	74726175 		r3, r18, r12
 12c:	69616d00 	rsubli	r11, 27904
 130:	00632e6e 		r3, r3, r5
 134:	6c636e69 	necaget	r3, rfsl9
 138:	00656475 		r3, r5, r12
 13c:	6d6f682f 	ncaget	r11, rfsl15
 140:	626c2f65 	muli	r19, r12, 12133
 144:	6164676f 	muli	r11, r4, 26479
 148:	2f766f6e 	rsubic	r27, r22, 28526
 14c:	676f7270 	bslefi	r27, r15, 9, 48
 150:	736d6172 		r27, r13, r12
	for(i = 0; i < 10; i++){
 154:	6c69782f 	tncaget	r3, rfsl15
 158:	2f786e69 	rsubic	r27, r24, 28265
 15c:	69746956 		r11, r20, r13
 160:	30322f73 	addik	r1, r18, 12147
 164:	322e3232 	addik	r17, r14, 12850
 168:	756e672f 		r11, r14, r12
 16c:	63696d2f 	muli	r27, r9, 27951
	dynamic_arr_2 = (uint16_t *)malloc(sizeof(uint16_t)*4);
 170:	6c626f72 	necaget	r3, rfsl2
 174:	2f657a61 	rsubic	r27, r5, 31329
 178:	2f6e696c 	rsubic	r27, r14, 26988
 17c:	7263696d 		r19, r3, r13
 180:	616c626f 	muli	r11, r12, 25199
	for(i = 0; i < 4; i++){
 184:	6265657a 	muli	r19, r5, 25978
 188:	6c69782d 	tncaget	r3, rfsl13
		dynamic_arr_2[i] = static_arr_2[i];
 18c:	2d786e69 	rsubic	r11, r24, 28265
 190:	2f666c65 	rsubic	r27, r6, 27749
 194:	2f727375 	rsubic	r27, r18, 29557
 198:	6c636e69 	necaget	r3, rfsl9
 19c:	2f656475 	rsubic	r27, r5, 25717
 1a0:	00737973 		r3, r19, r15
 1a4:	65656c73 	bslefi	r11, r5, 49, 51
 1a8:	00682e70 		r3, r8, r5
 1ac:	6d6f682f 	ncaget	r11, rfsl15
 1b0:	626c2f65 	muli	r19, r12, 12133
 1b4:	6164676f 	muli	r11, r4, 26479
	for(i = 0; i < 4; i++){
 1b8:	2f766f6e 	rsubic	r27, r22, 28526
 1bc:	6b726f77 	xorli	r27, 28535
 1c0:	63617073 	muli	r27, r1, 28787
 1c4:	782f7365 		r1, r15, r14
 1c8:	6e696c69 	necaget	r19, rfsl9
 1cc:	6f775f78 	tneaget	r27, rfsl8
 1d0:	70736b72 		r3, r19, r13
	printf("\n dynamic_arr_1[ ] = {\n\r");
 1d4:	2f656361 	rsubic	r27, r5, 25441
 1d8:	355f3132 	rsubik	r10, r31, 12594
 1dc:	64656c00 	bslefi	r3, r5, 48, 0
 1e0:	6f682f00 	ecaget	r27, rfsl0
 1e4:	6c2f656d 	necget	r1, rfsl13
	for(i = 0; i < 10; i++){
 1e8:	64676f62 	bslefi	r3, r7, 61, 34
 1ec:	766f6e61 		r19, r15, r13
		printf("0x%08X\n\r", dynamic_arr_1[i]);
 1f0:	6f72702f 	tncget	r27, rfsl15
 1f4:	6d617267 	tncget	r11, rfsl7
 1f8:	69782f73 		r11, r24, r5
 1fc:	786e696c 		r3, r14, r13
 200:	7469562f 		r3, r9, r10
 204:	322f7369 	addik	r17, r15, 29545
 208:	2e323230 	rsubic	r17, r18, 12848
 20c:	6e672f32 	ecaget	r19, rfsl2
 210:	696d2f75 		r11, r13, r5
 214:	626f7263 	muli	r19, r15, 29283
 218:	657a616c 	bslefi	r11, r26, 5, 44
	for(i = 0; i < 10; i++){
 21c:	6e696c2f 	necaget	r19, rfsl15
 220:	63696d2f 	muli	r27, r9, 27951
 224:	6c626f72 	necaget	r3, rfsl2
 228:	65657a61 	bslefi	r11, r5, 41, 33
 22c:	69782d62 		r11, r24, r5
 230:	786e696c 		r3, r14, r13
 234:	666c652d 	bslefi	r19, r12, 20, 45
	printf("}\n\r");
 238:	7273752f 		r19, r19, r14
 23c:	636e692f 	muli	r27, r14, 26927
 240:	6564756c 	bslefi	r11, r4, 21, 44
 244:	63616d2f 	muli	r27, r1, 27951
 248:	656e6968 	bslefi	r11, r14, 37, 40
	printf("\n dynamic_arr_2[ ] = {\n\r");
 24c:	72617500 		r19, r1, r14
 250:	00682e74 		r3, r8, r5
 254:	6665645f 	bslefi	r19, r5, 17, 31
 258:	746c7561 		r3, r12, r14
 25c:	7079745f 		r3, r25, r14
	for(i = 0; i < 4; i++){
 260:	682e7365 		r1, r14, r14
 264:	64747300 	bslefi	r3, r20, 12, 0
		printf("0x%04X\n\r", dynamic_arr_2[i]);
 268:	2e62696c 	rsubic	r19, r2, 26988
 26c:	74730068 		r3, r19, r0
 270:	66656464 	bslefi	r19, r5, 17, 36
 274:	Address 0x0000000000000274 is out of bounds.

