
./debug/main.o:     file format elf32-microblazeel


Disassembly of section .text:

00000000 <main>:
#include "uart.h"
#include "print.h"
#include "sleep.h"
#include "autoconf.h"

int main(void){
   0:	3021ff8c 	addik	r1, r1, -116
   4:	f9e10000 	swi	r15, r1, 0
   8:	fa610070 	swi	r19, r1, 112
   c:	12610000 	addk	r19, r1, r0
	float my_fpu_array_1[10] = {4.00, 16.00, 3.504, 350.768, 1.14, 1256.13, 4096.00, 56.1212, 98.111, 311.256};
  10:	b0000000 	imm	0
  14:	e9800020 	lwi	r12, r0, 32
  18:	b0000000 	imm	0
  1c:	e9600024 	lwi	r11, r0, 36
  20:	b0000000 	imm	0
  24:	e9400028 	lwi	r10, r0, 40
  28:	b0000000 	imm	0
  2c:	e920002c 	lwi	r9, r0, 44
  30:	b0000000 	imm	0
  34:	e9000030 	lwi	r8, r0, 48
  38:	b0000000 	imm	0
  3c:	e8e00034 	lwi	r7, r0, 52
  40:	b0000000 	imm	0
  44:	e8c00038 	lwi	r6, r0, 56
  48:	b0000000 	imm	0
  4c:	e8a0003c 	lwi	r5, r0, 60
  50:	b0000000 	imm	0
  54:	e8800040 	lwi	r4, r0, 64
  58:	b0000000 	imm	0
  5c:	e8600044 	lwi	r3, r0, 68
  60:	f993001c 	swi	r12, r19, 28
  64:	f9730020 	swi	r11, r19, 32
  68:	f9530024 	swi	r10, r19, 36
  6c:	f9330028 	swi	r9, r19, 40
  70:	f913002c 	swi	r8, r19, 44
  74:	f8f30030 	swi	r7, r19, 48
  78:	f8d30034 	swi	r6, r19, 52
  7c:	f8b30038 	swi	r5, r19, 56
  80:	f893003c 	swi	r4, r19, 60
  84:	f8730040 	swi	r3, r19, 64
	float my_sqrt[10];
	volatile int i;

        led_init();
  88:	b0000000 	imm	0
  8c:	b9f40000 	brlid	r15, 0
  90:	80000000 	or	r0, r0, r0
        uart_init();        
  94:	b0000000 	imm	0
  98:	b9f40000 	brlid	r15, 0
  9c:	80000000 	or	r0, r0, r0

	for(i = 0; i < 10; i++){
  a0:	f813006c 	swi	r0, r19, 108
  a4:	b8000040 	bri	64		// e4
	//... Place in-line assembly here ...
	asm volatile("fsqrt %0,%1" : "=r" (my_sqrt[i]) : "r" (my_fpu_array_1[i]) );	
  a8:	e873006c 	lwi	r3, r19, 108
  ac:	e893006c 	lwi	r4, r19, 108
  b0:	64840402 	bslli	r4, r4, 2
  b4:	30b3001c 	addik	r5, r19, 28
  b8:	10852000 	addk	r4, r5, r4
  bc:	e8840000 	lwi	r4, r4, 0
  c0:	58840380 	fsqrt	r4, r4
  c4:	64630402 	bslli	r3, r3, 2
  c8:	30b3001c 	addik	r5, r19, 28
  cc:	10651800 	addk	r3, r5, r3
  d0:	30630028 	addik	r3, r3, 40
  d4:	f8830000 	swi	r4, r3, 0
	for(i = 0; i < 10; i++){
  d8:	e873006c 	lwi	r3, r19, 108
  dc:	30630001 	addik	r3, r3, 1
  e0:	f873006c 	swi	r3, r19, 108
  e4:	e893006c 	lwi	r4, r19, 108
  e8:	30600009 	addik	r3, r0, 9
  ec:	16441801 	cmp	r18, r4, r3
  f0:	bcb2ffb8 	bgei	r18, -72		// a8
	}	

	//Expected output:
	//2, 4, 1.871897, 18.728802, 1.067708, 35.441925, 64, 7.491408, 9.905100, 17.642448
	printf("\nmy_sqrt[] = {");
  f4:	b0000000 	imm	0
  f8:	30a00000 	addik	r5, r0, 0
  fc:	b0000000 	imm	0
 100:	b9f40000 	brlid	r15, 0
 104:	80000000 	or	r0, r0, r0
	for(i = 0; i < 10; i++){
 108:	f813006c 	swi	r0, r19, 108
 10c:	b800005c 	bri	92		// 168
		printf("%12.6f, ", my_sqrt[i]);
 110:	e873006c 	lwi	r3, r19, 108
 114:	64630402 	bslli	r3, r3, 2
 118:	3093001c 	addik	r4, r19, 28
 11c:	10641800 	addk	r3, r4, r3
 120:	30630028 	addik	r3, r3, 40
 124:	e8630000 	lwi	r3, r3, 0
 128:	10a30000 	addk	r5, r3, r0
 12c:	b0000000 	imm	0
 130:	b9f40000 	brlid	r15, 0
 134:	80000000 	or	r0, r0, r0
 138:	10a40000 	addk	r5, r4, r0
 13c:	10830000 	addk	r4, r3, r0
 140:	10c40000 	addk	r6, r4, r0
 144:	10e50000 	addk	r7, r5, r0
 148:	b0000000 	imm	0
 14c:	30a00010 	addik	r5, r0, 16
 150:	b0000000 	imm	0
 154:	b9f40000 	brlid	r15, 0
 158:	80000000 	or	r0, r0, r0
	for(i = 0; i < 10; i++){
 15c:	e873006c 	lwi	r3, r19, 108
 160:	30630001 	addik	r3, r3, 1
 164:	f873006c 	swi	r3, r19, 108
 168:	e893006c 	lwi	r4, r19, 108
 16c:	30600009 	addik	r3, r0, 9
 170:	16441801 	cmp	r18, r4, r3
 174:	bcb2ff9c 	bgei	r18, -100		// 110
	}
	printf("}\n");
 178:	b0000000 	imm	0
 17c:	30a0001c 	addik	r5, r0, 28
 180:	b0000000 	imm	0
 184:	b9f40000 	brlid	r15, 0
 188:	80000000 	or	r0, r0, r0


	while (1){
        	led_set();
 18c:	b0000000 	imm	0
 190:	b9f40000 	brlid	r15, 0
 194:	80000000 	or	r0, r0, r0
       	usleep(1000000);
 198:	b000000f 	imm	15
 19c:	30a04240 	addik	r5, r0, 16960
 1a0:	b0000000 	imm	0
 1a4:	b9f40000 	brlid	r15, 0
 1a8:	80000000 	or	r0, r0, r0
        	led_clear();
 1ac:	b0000000 	imm	0
 1b0:	b9f40000 	brlid	r15, 0
 1b4:	80000000 	or	r0, r0, r0
        	usleep(1000000);
 1b8:	b000000f 	imm	15
 1bc:	30a04240 	addik	r5, r0, 16960
 1c0:	b0000000 	imm	0
 1c4:	b9f40000 	brlid	r15, 0
 1c8:	80000000 	or	r0, r0, r0
        	led_set();
 1cc:	b800ffc0 	bri	-64		// 18c

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	5f796d0a 		r27, r25, r13
   4:	74727173 		r3, r18, r14
   8:	3d205d5b 	rsubikc	r9, r0, 23899
   c:	00007b20 		r0, r0, r15
  10:	2e323125 	rsubic	r17, r18, 12581
  14:	202c6636 	addi	r1, r12, 26166
  18:	
Disassembly of section .debug_frame:

00000000 <.debug_frame>:
int main(void){
   0:	0000000c 		r0, r0, r0
   4:	ffffffff 	sli	r31, r31, -1
   8:	7f010003 		r24, r1, r0
   c:	00010c0f 		r0, r1, r1
	float my_fpu_array_1[10] = {4.00, 16.00, 3.504, 350.768, 1.14, 1256.13, 4096.00, 56.1212, 98.111, 311.256};
  10:	00000024 		r0, r0, r0
	...
  1c:	000001d0 		r0, r0, r0
  20:	00000404 		r0, r0, r0
  24:	04740e00 	neg	r3, r20
  28:	00000008 		r0, r0, r0
  2c:	0493748f 	neg	r4, r19
  30:	00000404 		r0, r0, r0
  34:	00130d00 		r0, r19, r1

Disassembly of section .debug_info:

00000000 <.debug_info>:
int main(void){
   0:	00000132 		r0, r0, r0
   4:	04010005 	neg	r0, r1
   8:	
Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	0b002401 		r24, r0, r4
   4:	030b3e0b 		r24, r11, r7
   8:	0200000e 		r16, r0, r0
   c:	193f002e 		r9, r31, r0
	float my_fpu_array_1[10] = {4.00, 16.00, 3.504, 350.768, 1.14, 1256.13, 4096.00, 56.1212, 98.111, 311.256};
  10:	0b3a0e03 		r25, r26, r1
  14:	21390b3b 	addi	r9, r25, 2875
  18:	3c192706 	rsubikc	r0, r25, 9990
  1c:	03000019 		r24, r0, r0
  20:	13490005 		r26, r9, r0
  24:	34040000 	rsubik	r0, r4, 0
  28:	3a0e0300 	addikc	r16, r14, 768
  2c:	0b3b0121 		r25, r27, r0
  30:	49082139 		r8, r8, r4
  34:	00180213 		r0, r24, r0
  38:	01110500 		r8, r17, r0
  3c:	0b130e25 		r24, r19, r1
  40:	1f1b1f03 		r24, r27, r3
  44:	06120111 	neg	r16, r18
  48:	00001710 		r0, r0, r2
  4c:	0b002406 		r24, r0, r4
  50:	030b3e0b 		r24, r11, r7
  54:	07000008 	neg	r24, r0
  58:	13490035 		r26, r9, r0
  5c:	26080000 	rsubi	r16, r8, 0
  60:	00134900 	addl	r0, r19, r9
  64:	00160900 	addl	r0, r22, r1
  68:	0b3a0e03 		r25, r26, r1
  6c:	0b390b3b 		r25, r25, r1
  70:	00001349 		r0, r0, r2
  74:	0b000f0a 		r24, r0, r1
  78:	0013490b 		r0, r19, r9
  7c:	012e0b00 		r9, r14, r1
  80:	0e03193f 		r16, r3, r3
  84:	0b3b0b3a 		r25, r27, r1
        led_init();
  88:	19270b39 		r9, r7, r1
  8c:	1301193c 		r24, r1, r3
  90:	2e0c0000 	rsubic	r16, r12, 0
        uart_init();        
  94:	03193f01 		r24, r25, r7
  98:	3b0b3a0e 	addikc	r24, r11, 14862
  9c:	270b390b 	rsubi	r24, r11, 14603
	for(i = 0; i < 10; i++){
  a0:	3c134919 	rsubikc	r0, r19, 18713
  a4:	00130119 		r0, r19, r0
	asm volatile("fsqrt %0,%1" : "=r" (my_sqrt[i]) : "r" (my_fpu_array_1[i]) );	
  a8:	00180d00 		r0, r24, r1
  ac:	2e0e0000 	rsubic	r16, r14, 0
  b0:	03193f01 		r24, r25, r7
  b4:	3b0b3a0e 	addikc	r24, r11, 14862
  b8:	270b390b 	rsubi	r24, r11, 14603
  bc:	11134919 		r8, r19, r9
  c0:	40061201 		r0, r6, r2
  c4:	01197c18 		r8, r25, r15
  c8:	0f000013 		r24, r0, r0
  cc:	08030034 		r0, r3, r0
  d0:	0b3b0b3a 		r25, r27, r1
  d4:	13490b39 		r26, r9, r1
	for(i = 0; i < 10; i++){
  d8:	00001802 		r0, r0, r3
  dc:	49010110 		r8, r1, r0
  e0:	00130113 		r0, r19, r0
  e4:	00211100 	addl	r1, r1, r2
  e8:	0b2f1349 		r25, r15, r2
  ec:	Address 0x00000000000000ec is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
int main(void){
   0:	0000001c 		r0, r0, r0
   4:	00000002 		r0, r0, r0
   8:	00040000 	add	r0, r4, r0
	...
	float my_fpu_array_1[10] = {4.00, 16.00, 3.504, 350.768, 1.14, 1256.13, 4096.00, 56.1212, 98.111, 311.256};
  14:	000001d0 		r0, r0, r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
int main(void){
   0:	00000171 		r0, r0, r0
   4:	00040005 		r0, r4, r0
   8:	00000053 		r0, r0, r0
   c:	f6010101 	shi	r16, r1, 257
	float my_fpu_array_1[10] = {4.00, 16.00, 3.504, 350.768, 1.14, 1256.13, 4096.00, 56.1212, 98.111, 311.256};
  10:	01000df2 		r8, r0, r1
  14:	00010101 		r0, r1, r0
  18:	00010000 	add	r0, r1, r0
  1c:	01010100 	addl	r8, r1, r0
  20:	0006051f 		r0, r6, r0
  24:	00520000 	add	r2, r18, r0
  28:	006e0000 	add	r3, r14, r0
  2c:	005e0000 	add	r2, r30, r0
  30:	
Disassembly of section .debug_str:

00000000 <.debug_str>:
int main(void){
   0:	676e6f6c 	bslefi	r27, r14, 61, 44
   4:	6e6f6c20 	necaget	r19, rfsl0
   8:	6e692067 	cget	r19, rfsl7
   c:	6e750074 	get	r19, rfsl4
	float my_fpu_array_1[10] = {4.00, 16.00, 3.504, 350.768, 1.14, 1256.13, 4096.00, 56.1212, 98.111, 311.256};
  10:	6e676973 	ncaget	r19, rfsl3
  14:	69206465 	addli	r9, 25701
  18:	6d00746e 	tnecget	r8, rfsl14
  1c:	006e6961 		r3, r14, r13
  20:	5f64656c 		r27, r4, r12
  24:	74696e69 		r3, r9, r13
  28:	6e6f6c00 	necaget	r19, rfsl0
  2c:	6e752067 	cget	r19, rfsl7
  30:	6e676973 	ncaget	r19, rfsl3
  34:	69206465 	addli	r9, 25701
  38:	6c00746e 	tnecget	r0, rfsl14
  3c:	20676e6f 	addi	r3, r7, 28271
  40:	676e6f6c 	bslefi	r27, r14, 61, 44
  44:	736e7520 		r27, r14, r14
  48:	656e6769 	bslefi	r11, r14, 29, 41
  4c:	6e692064 	cget	r19, rfsl4
  50:	6c660074 	get	r3, rfsl4
  54:	0074616f 		r3, r20, r12
  58:	665f796d 	bslefi	r18, r31, 37, 45
  5c:	615f7570 	muli	r10, r31, 30064
  60:	79617272 		r11, r1, r14
  64:	4700315f 	bslrl	r24, r0, r6
  68:	4320554e 		r25, r0, r10
  6c:	31203731 	addik	r9, r0, 14129
  70:	2e322e31 	rsubic	r17, r18, 11825
  74:	6d2d2030 	cget	r9, rfsl0
  78:	64726168 	bslefi	r3, r18, 5, 40
  7c:	6f6c662d 	necget	r27, rfsl13
  80:	2d207461 	rsubic	r9, r0, 29793
  84:	2d6c786d 	rsubic	r11, r12, 30829
        led_init();
  88:	616f6c66 	muli	r11, r15, 27750
  8c:	6f632d74 	ecaget	r27, rfsl4
  90:	7265766e 		r19, r5, r14
        uart_init();        
  94:	6d2d2074 	cget	r9, rfsl4
  98:	662d6c78 	bslefi	r17, r13, 49, 56
  9c:	74616f6c 		r3, r1, r13
	for(i = 0; i < 10; i++){
  a0:	7271732d 		r19, r17, r14
  a4:	6d2d2074 	cget	r9, rfsl4
	asm volatile("fsqrt %0,%1" : "=r" (my_sqrt[i]) : "r" (my_fpu_array_1[i]) );	
  a8:	7474696c 		r3, r20, r13
  ac:	652d656c 	bslefi	r9, r13, 21, 44
  b0:	6169646e 	muli	r11, r9, 25710
  b4:	6d2d206e 	cget	r9, rfsl14
  b8:	622d6c78 	muli	r17, r13, 27768
  bc:	65727261 	bslefi	r11, r18, 9, 33
  c0:	68732d6c 	andnli	r3, 11628
  c4:	20746669 	addi	r3, r20, 26217
  c8:	6c786d2d 	necaget	r3, rfsl13
  cc:	7461702d 		r3, r1, r14
  d0:	6e726574 	necget	r19, rfsl4
  d4:	6d6f632d 	ncget	r11, rfsl13
	for(i = 0; i < 10; i++){
  d8:	65726170 	bslefi	r11, r18, 5, 48
  dc:	636d2d20 	muli	r27, r13, 11552
  e0:	763d7570 		r17, r29, r14
  e4:	302e3131 	addik	r1, r14, 12593
  e8:	6e6d2d20 	ecaget	r19, rfsl0
  ec:	6c782d6f 	ecaget	r3, rfsl15
  f0:	666f732d 	bslefi	r19, r15, 12, 45
	printf("\nmy_sqrt[] = {");
  f4:	756d2d74 		r11, r13, r5
  f8:	672d206c 	bslrli	r25, r13, 44
  fc:	304f2d20 	addik	r2, r15, 11552
 100:	736e7500 		r27, r14, r14
 104:	656e6769 	bslefi	r11, r14, 29, 41
	for(i = 0; i < 10; i++){
 108:	68632064 	rsublic	r3, 8292
 10c:	75007261 		r8, r0, r14
		printf("%12.6f, ", my_sqrt[i]);
 110:	65656c73 	bslefi	r11, r5, 49, 51
 114:	68630070 	rsublic	r3, 112
 118:	70007261 		r0, r0, r14
 11c:	746e6972 		r3, r14, r13
 120:	75005f66 		r8, r0, r11
 124:	5f747261 		r27, r20, r14
 128:	74696e69 		r3, r9, r13
 12c:	6e6f6c00 	necaget	r19, rfsl0
 130:	6e692067 	cget	r19, rfsl7
 134:	656c0074 	bsrli	r11, r12, 52
 138:	6c635f64 	tneaget	r3, rfsl4
 13c:	00726165 		r3, r18, r12
 140:	726f6873 		r19, r15, r13
 144:	6e752074 	cget	r19, rfsl4
 148:	6e676973 	ncaget	r19, rfsl3
 14c:	69206465 	addli	r9, 25701
 150:	7300746e 		r24, r0, r14
 154:	656e6769 	bslefi	r11, r14, 29, 41
 158:	68632064 	rsublic	r3, 8292
	for(i = 0; i < 10; i++){
 15c:	6c007261 	tncget	r0, rfsl1
 160:	20676e6f 	addi	r3, r7, 28271
 164:	62756f64 	muli	r19, r21, 28516
 168:	6d00656c 	necget	r8, rfsl12
 16c:	71735f79 		r11, r19, r11
 170:	55007472 		r8, r0, r14
 174:	474e4f4c 		r26, r14, r9
	printf("}\n");
 178:	6f687300 	tncget	r27, rfsl0
 17c:	69207472 	addli	r9, 29810
 180:	6c00746e 	tnecget	r0, rfsl14
 184:	735f6465 		r26, r31, r12
 188:	Address 0x0000000000000188 is out of bounds.


Disassembly of section .debug_line_str:

00000000 <.debug_line_str>:
int main(void){
   0:	6e697270 	tncget	r19, rfsl0
   4:	682f0074 		r1, r15, r0
   8:	2f656d6f 	rsubic	r27, r5, 28015
   c:	676f626c 	bslefi	r27, r15, 9, 44
	float my_fpu_array_1[10] = {4.00, 16.00, 3.504, 350.768, 1.14, 1256.13, 4096.00, 56.1212, 98.111, 311.256};
  10:	6f6e6164 	ncget	r27, rfsl4
  14:	6f772f76 	ecaget	r27, rfsl6
  18:	70736b72 		r3, r19, r13
  1c:	73656361 		r27, r5, r12
  20:	6c69782f 	tncaget	r3, rfsl15
  24:	5f786e69 		r27, r24, r13
  28:	6b726f77 	xorli	r27, 28535
  2c:	63617073 	muli	r27, r1, 28787
  30:	39312f65 	addikc	r9, r17, 12133
  34:	0031315f 		r1, r17, r6
  38:	2e64656c 	rsubic	r19, r4, 25964
  3c:	69780068 		r11, r24, r0
  40:	79745f6c 		r11, r20, r11
  44:	2e736570 	rsubic	r19, r19, 25968
  48:	72700068 		r19, r16, r0
  4c:	2e746e69 	rsubic	r19, r20, 28265
  50:	61750068 	muli	r11, r21, 104
  54:	6d007472 	tnecget	r8, rfsl2
  58:	2e6e6961 	rsubic	r19, r14, 26977
  5c:	6e690063 	get	r19, rfsl3
  60:	64756c63 	bslefi	r3, r21, 49, 35
  64:	6c730065 	get	r3, rfsl5
  68:	2e706565 	rsubic	r19, r16, 25957
  6c:	656c0068 	bsrli	r11, r12, 40
  70:	61750064 	muli	r11, r21, 100
  74:	682e7472 		r1, r14, r14
	...
