
./debug/main.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <start_of_heap_get>:

#define SCB_CPACR_CP10_CP11_EN	0xF00000

volatile uint32_t *scb_cpacr = (volatile uint32_t *)0xE000ED88;

unsigned long start_of_heap_get(void){
   0:	b480      	push	{r7}
   2:	af00      	add	r7, sp, #0
	extern char _sheap; /* Defined by the linker */
	return (unsigned long)&_sheap;
   4:	4b02      	ldr	r3, [pc, #8]	; (10 <start_of_heap_get+0x10>)
}
   6:	4618      	mov	r0, r3
   8:	46bd      	mov	sp, r7
   a:	f85d 7b04 	ldr.w	r7, [sp], #4
   e:	4770      	bx	lr
  10:	00000000 	andeq	r0, r0, r0

00000014 <main>:
 * then outputs a message over the UART and
 * starts blinking a diode.
 *
 * \return None.
 */
int main(void){
  14:	b5b0      	push	{r4, r5, r7, lr}
  16:	b092      	sub	sp, #72	; 0x48
  18:	af00      	add	r7, sp, #0
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  1a:	4b73      	ldr	r3, [pc, #460]	; (1e8 <main+0x1d4>)
  1c:	f107 0414 	add.w	r4, r7, #20
  20:	461d      	mov	r5, r3
  22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  2a:	e895 0003 	ldmia.w	r5, {r0, r1}
  2e:	e884 0003 	stmia.w	r4, {r0, r1}
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  32:	4a6e      	ldr	r2, [pc, #440]	; (1ec <main+0x1d8>)
  34:	f107 030c 	add.w	r3, r7, #12
  38:	e892 0003 	ldmia.w	r2, {r0, r1}
  3c:	e883 0003 	stmia.w	r3, {r0, r1}
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  40:	4b6b      	ldr	r3, [pc, #428]	; (1f0 <main+0x1dc>)
  42:	681b      	ldr	r3, [r3, #0]
  44:	60bb      	str	r3, [r7, #8]
	uint32_t *dynamic_arr_1;
	uint16_t *dynamic_arr_2;
	uint8_t *dynamic_arr_3;
	volatile int i;

	*scb_cpacr |= SCB_CPACR_CP10_CP11_EN; //Enable ARM's FPU
  46:	4b6b      	ldr	r3, [pc, #428]	; (1f4 <main+0x1e0>)
  48:	681b      	ldr	r3, [r3, #0]
  4a:	681a      	ldr	r2, [r3, #0]
  4c:	4b69      	ldr	r3, [pc, #420]	; (1f4 <main+0x1e0>)
  4e:	681b      	ldr	r3, [r3, #0]
  50:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  54:	601a      	str	r2, [r3, #0]

	led_init();
  56:	f7ff fffe 	bl	0 <led_init>
	uart_init(CONFIG_UART_BAUD_RATE);
  5a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
  5e:	f7ff fffe 	bl	0 <uart_init>
#ifdef CONFIG_BUTTON_ENABLED
	button_init();
  62:	f7ff fffe 	bl	0 <button_init>
#endif

	printf("The start of the HEAP segment: 0x%08X\n", start_of_heap_get());
  66:	f7ff fffe 	bl	0 <start_of_heap_get>
  6a:	4603      	mov	r3, r0
  6c:	4619      	mov	r1, r3
  6e:	4862      	ldr	r0, [pc, #392]	; (1f8 <main+0x1e4>)
  70:	f7ff fffe 	bl	0 <printf_>

	dynamic_arr_1 = (uint32_t *)malloc(sizeof(uint32_t)*10);
  74:	2028      	movs	r0, #40	; 0x28
  76:	f7ff fffe 	bl	0 <malloc>
  7a:	4603      	mov	r3, r0
  7c:	647b      	str	r3, [r7, #68]	; 0x44

	for(i = 0; i < 10; i++){
  7e:	2300      	movs	r3, #0
  80:	607b      	str	r3, [r7, #4]
  82:	e00e      	b.n	a2 <main+0x8e>
		dynamic_arr_1[i] = static_arr_1[i];
  84:	687b      	ldr	r3, [r7, #4]
  86:	687a      	ldr	r2, [r7, #4]
  88:	0092      	lsls	r2, r2, #2
  8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
  8c:	440a      	add	r2, r1
  8e:	009b      	lsls	r3, r3, #2
  90:	f107 0148 	add.w	r1, r7, #72	; 0x48
  94:	440b      	add	r3, r1
  96:	f853 3c34 	ldr.w	r3, [r3, #-52]
  9a:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 10; i++){
  9c:	687b      	ldr	r3, [r7, #4]
  9e:	3301      	adds	r3, #1
  a0:	607b      	str	r3, [r7, #4]
  a2:	687b      	ldr	r3, [r7, #4]
  a4:	2b09      	cmp	r3, #9
  a6:	dded      	ble.n	84 <main+0x70>
	}

	dynamic_arr_2 = (uint16_t *)malloc(sizeof(uint16_t)*4);
  a8:	2008      	movs	r0, #8
  aa:	f7ff fffe 	bl	0 <malloc>
  ae:	4603      	mov	r3, r0
  b0:	643b      	str	r3, [r7, #64]	; 0x40

	for(i = 0; i < 4; i++){
  b2:	2300      	movs	r3, #0
  b4:	607b      	str	r3, [r7, #4]
  b6:	e00e      	b.n	d6 <main+0xc2>
		dynamic_arr_2[i] = static_arr_2[i];
  b8:	687b      	ldr	r3, [r7, #4]
  ba:	687a      	ldr	r2, [r7, #4]
  bc:	0052      	lsls	r2, r2, #1
  be:	6c39      	ldr	r1, [r7, #64]	; 0x40
  c0:	440a      	add	r2, r1
  c2:	005b      	lsls	r3, r3, #1
  c4:	f107 0148 	add.w	r1, r7, #72	; 0x48
  c8:	440b      	add	r3, r1
  ca:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
  ce:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 4; i++){
  d0:	687b      	ldr	r3, [r7, #4]
  d2:	3301      	adds	r3, #1
  d4:	607b      	str	r3, [r7, #4]
  d6:	687b      	ldr	r3, [r7, #4]
  d8:	2b03      	cmp	r3, #3
  da:	dded      	ble.n	b8 <main+0xa4>
	}

	printf("\n dynamic_arr_1[ ] = {\n");
  dc:	4847      	ldr	r0, [pc, #284]	; (1fc <main+0x1e8>)
  de:	f7ff fffe 	bl	0 <printf_>
	for(i = 0; i < 10; i++){
  e2:	2300      	movs	r3, #0
  e4:	607b      	str	r3, [r7, #4]
  e6:	e00b      	b.n	100 <main+0xec>
		printf("0x%08X\n", dynamic_arr_1[i]);
  e8:	687b      	ldr	r3, [r7, #4]
  ea:	009b      	lsls	r3, r3, #2
  ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
  ee:	4413      	add	r3, r2
  f0:	681b      	ldr	r3, [r3, #0]
  f2:	4619      	mov	r1, r3
  f4:	4842      	ldr	r0, [pc, #264]	; (200 <main+0x1ec>)
  f6:	f7ff fffe 	bl	0 <printf_>
	for(i = 0; i < 10; i++){
  fa:	687b      	ldr	r3, [r7, #4]
  fc:	3301      	adds	r3, #1
  fe:	607b      	str	r3, [r7, #4]
 100:	687b      	ldr	r3, [r7, #4]
 102:	2b09      	cmp	r3, #9
 104:	ddf0      	ble.n	e8 <main+0xd4>
	}
	printf("}\n");
 106:	483f      	ldr	r0, [pc, #252]	; (204 <main+0x1f0>)
 108:	f7ff fffe 	bl	0 <printf_>

	printf("\n dynamic_arr_2[ ] = {\n");
 10c:	483e      	ldr	r0, [pc, #248]	; (fc <printf_+0xfc>)
 10e:	f7ff fffe 	bl	0 <printf_>
	for(i = 0; i < 4; i++){
 112:	2300      	movs	r3, #0
 114:	607b      	str	r3, [r7, #4]
 116:	e00b      	b.n	130 <main+0x11c>
		printf("0x%04X\n", dynamic_arr_2[i]);
 118:	687b      	ldr	r3, [r7, #4]
 11a:	005b      	lsls	r3, r3, #1
 11c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 11e:	4413      	add	r3, r2
 120:	881b      	ldrh	r3, [r3, #0]
 122:	4619      	mov	r1, r3
 124:	4839      	ldr	r0, [pc, #228]	; (20c <main+0x1f8>)
 126:	f7ff fffe 	bl	0 <printf_>
	for(i = 0; i < 4; i++){
 12a:	687b      	ldr	r3, [r7, #4]
 12c:	3301      	adds	r3, #1
 12e:	607b      	str	r3, [r7, #4]
 130:	687b      	ldr	r3, [r7, #4]
 132:	2b03      	cmp	r3, #3
 134:	ddf0      	ble.n	118 <main+0x104>
	}
	printf("}\n");
 136:	4833      	ldr	r0, [pc, #204]	; (204 <main+0x1f0>)
 138:	f7ff fffe 	bl	0 <printf_>

	free(dynamic_arr_1);
 13c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 13e:	f7ff fffe 	bl	0 <free>

	dynamic_arr_3 = (uint8_t *)malloc(sizeof(uint16_t)*4);
 142:	2008      	movs	r0, #8
 144:	f7ff fffe 	bl	0 <malloc>
 148:	4603      	mov	r3, r0
 14a:	63fb      	str	r3, [r7, #60]	; 0x3c

	for(i = 0; i < 4; i++){
 14c:	2300      	movs	r3, #0
 14e:	607b      	str	r3, [r7, #4]
 150:	e00d      	b.n	16e <main+0x15a>
		dynamic_arr_3[i] = static_arr_3[i];
 152:	687a      	ldr	r2, [r7, #4]
 154:	687b      	ldr	r3, [r7, #4]
 156:	4619      	mov	r1, r3
 158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 15a:	440b      	add	r3, r1
 15c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 160:	440a      	add	r2, r1
 162:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 166:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 4; i++){
 168:	687b      	ldr	r3, [r7, #4]
 16a:	3301      	adds	r3, #1
 16c:	607b      	str	r3, [r7, #4]
 16e:	687b      	ldr	r3, [r7, #4]
 170:	2b03      	cmp	r3, #3
 172:	ddee      	ble.n	152 <main+0x13e>
	}

	printf("\n dynamic_arr_3[ ] = {\n");
 174:	4826      	ldr	r0, [pc, #152]	; (210 <main+0x1fc>)
 176:	f7ff fffe 	bl	0 <printf_>
	for(i = 0; i < 4; i++){
 17a:	2300      	movs	r3, #0
 17c:	607b      	str	r3, [r7, #4]
 17e:	e00b      	b.n	198 <main+0x184>
		printf("0x%02X\n", dynamic_arr_3[i]);
 180:	687b      	ldr	r3, [r7, #4]
 182:	461a      	mov	r2, r3
 184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 186:	4413      	add	r3, r2
 188:	781b      	ldrb	r3, [r3, #0]
 18a:	4619      	mov	r1, r3
 18c:	4821      	ldr	r0, [pc, #132]	; (214 <main+0x200>)
 18e:	f7ff fffe 	bl	0 <printf_>
	for(i = 0; i < 4; i++){
 192:	687b      	ldr	r3, [r7, #4]
 194:	3301      	adds	r3, #1
 196:	607b      	str	r3, [r7, #4]
 198:	687b      	ldr	r3, [r7, #4]
 19a:	2b03      	cmp	r3, #3
 19c:	ddf0      	ble.n	180 <main+0x16c>
	}
	printf("}\n");
 19e:	4819      	ldr	r0, [pc, #100]	; (204 <main+0x1f0>)
 1a0:	f7ff fffe 	bl	0 <printf_>

	free(dynamic_arr_2);
 1a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 1a6:	f7ff fffe 	bl	0 <free>
	free(dynamic_arr_3);
 1aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 1ac:	f7ff fffe 	bl	0 <free>

	while (1){
		led_set();
 1b0:	f7ff fffe 	bl	0 <led_set>
		for(i = 0; i < 50000; i++){ }
 1b4:	2300      	movs	r3, #0
 1b6:	607b      	str	r3, [r7, #4]
 1b8:	e002      	b.n	1c0 <main+0x1ac>
 1ba:	687b      	ldr	r3, [r7, #4]
 1bc:	3301      	adds	r3, #1
 1be:	607b      	str	r3, [r7, #4]
 1c0:	687b      	ldr	r3, [r7, #4]
 1c2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 1c6:	4293      	cmp	r3, r2
 1c8:	ddf7      	ble.n	1ba <main+0x1a6>
		led_clear();
 1ca:	f7ff fffe 	bl	0 <led_clear>
		for(i = 0; i < 50000; i++){ }
 1ce:	2300      	movs	r3, #0
 1d0:	607b      	str	r3, [r7, #4]
 1d2:	e002      	b.n	1da <main+0x1c6>
 1d4:	687b      	ldr	r3, [r7, #4]
 1d6:	3301      	adds	r3, #1
 1d8:	607b      	str	r3, [r7, #4]
 1da:	687b      	ldr	r3, [r7, #4]
 1dc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 1e0:	4293      	cmp	r3, r2
 1e2:	ddf7      	ble.n	1d4 <main+0x1c0>
		led_set();
 1e4:	e7e4      	b.n	1b0 <main+0x19c>
 1e6:	bf00      	nop
 1e8:	0000008c 	andeq	r0, r0, ip, lsl #1
 1ec:	000000b4 	strheq	r0, [r0], -r4
 1f0:	000000bc 	strheq	r0, [r0], -ip
	...
 1fc:	00000028 	andeq	r0, r0, r8, lsr #32
 200:	00000040 	andeq	r0, r0, r0, asr #32
 204:	00000048 	andeq	r0, r0, r8, asr #32
 208:	0000004c 	andeq	r0, r0, ip, asr #32
 20c:	00000064 	andeq	r0, r0, r4, rrx
 210:	0000006c 	andeq	r0, r0, ip, rrx
 214:	00000084 	andeq	r0, r0, r4, lsl #1

Disassembly of section .data:

00000000 <scb_cpacr>:
volatile uint32_t *scb_cpacr = (volatile uint32_t *)0xE000ED88;
   0:	e000ed88 	and	lr, r0, r8, lsl #27

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	20656854 	rsbcs	r6, r5, r4, asr r8
   4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   8:	666f2074 			; <UNDEFINED> instruction: 0x666f2074
   c:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
  10:	41454820 	cmpmi	r5, r0, lsr #16
  14:	65732050 	ldrbvs	r2, [r3, #-80]!	; 0xffffffb0
  18:	6e656d67 	cdpvs	13, 6, cr6, cr5, cr7, {3}
  1c:	30203a74 	eorcc	r3, r0, r4, ror sl
  20:	38302578 	ldmdacc	r0!, {r3, r4, r5, r6, r8, sl, sp}
  24:	00000a58 	andeq	r0, r0, r8, asr sl
  28:	7964200a 	stmdbvc	r4!, {r1, r3, sp}^
  2c:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
  30:	72615f63 	rsbvc	r5, r1, #396	; 0x18c
  34:	5b315f72 	blpl	c57e04 <main+0xc57df0>
  38:	3d205d20 	stccc	13, cr5, [r0, #-128]!	; 0xffffff80
  3c:	000a7b20 	andeq	r7, sl, r0, lsr #22
  40:	30257830 	eorcc	r7, r5, r0, lsr r8
  44:	000a5838 	andeq	r5, sl, r8, lsr r8
  48:	00000a7d 	andeq	r0, r0, sp, ror sl
  4c:	7964200a 	stmdbvc	r4!, {r1, r3, sp}^
  50:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
  54:	72615f63 	rsbvc	r5, r1, #396	; 0x18c
  58:	5b325f72 	blpl	c97e28 <main+0xc97e14>
  5c:	3d205d20 	stccc	13, cr5, [r0, #-128]!	; 0xffffff80
  60:	000a7b20 	andeq	r7, sl, r0, lsr #22
  64:	30257830 	eorcc	r7, r5, r0, lsr r8
  68:	000a5834 	andeq	r5, sl, r4, lsr r8
  6c:	7964200a 	stmdbvc	r4!, {r1, r3, sp}^
  70:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
  74:	72615f63 	rsbvc	r5, r1, #396	; 0x18c
  78:	5b335f72 	blpl	cd7e48 <main+0xcd7e34>
  7c:	3d205d20 	stccc	13, cr5, [r0, #-128]!	; 0xffffff80
  80:	000a7b20 	andeq	r7, sl, r0, lsr #22
  84:	30257830 	eorcc	r7, r5, r0, lsr r8
  88:	000a5832 	andeq	r5, sl, r2, lsr r8
  8c:	11111111 	tstne	r1, r1, lsl r1
  90:	22222222 	eorcs	r2, r2, #536870914	; 0x20000002
  94:	33333333 	teqcc	r3, #-872415232	; 0xcc000000
  98:	44444444 	strbmi	r4, [r4], #-1092	; 0xfffffbbc
  9c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
  a0:	66666666 	strbtvs	r6, [r6], -r6, ror #12
  a4:	77777777 			; <UNDEFINED> instruction: 0x77777777
  a8:	88888888 	stmhi	r8, {r3, r7, fp, pc}
  ac:	99999999 	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
  b0:	aaaaaaaa 	bge	feaaab60 <main+0xfeaaab4c>
  b4:	dedebaba 			; <UNDEFINED> instruction: 0xdedebaba
  b8:	fefecece 	cdp2	14, 15, cr12, cr14, cr14, {6}
  bc:	efbeadde 	svc	0x00beadde

Disassembly of section .debug_info:

00000000 <.debug_info>:
unsigned long start_of_heap_get(void){
   0:	00000a90 	muleq	r0, r0, sl
	return (unsigned long)&_sheap;
   4:	00000004 	andeq	r0, r0, r4
}
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000004a1 	andeq	r0, r0, r1, lsr #9
  10:	0002530c 	andeq	r5, r2, ip, lsl #6
int main(void){
  14:	00036600 	andeq	r6, r3, r0, lsl #12
  18:	00000000 	andeq	r0, r0, r0
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  1c:	00021800 	andeq	r1, r2, r0, lsl #16
  20:	00000000 	andeq	r0, r0, r0
  24:	07040200 	streq	r0, [r4, -r0, lsl #4]
  28:	000001c5 	andeq	r0, r0, r5, asr #3
  2c:	69050403 	stmdbvs	r5, {r0, r1, sl}
  30:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  34:	0000002c 	andeq	r0, r0, ip, lsr #32
  38:	a6050802 	strge	r0, [r5], -r2, lsl #16
  3c:	02000000 	andeq	r0, r0, #0
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  40:	02800408 	addeq	r0, r0, #8, 8	; 0x8000000
  44:	01020000 	mrseq	r0, (UNDEF: 2)
	*scb_cpacr |= SCB_CPACR_CP10_CP11_EN; //Enable ARM's FPU
  48:	0000b406 	andeq	fp, r0, r6, lsl #8
  4c:	00250500 	eoreq	r0, r5, r0, lsl #10
  50:	2b020000 	blcs	80058 <main+0x80044>
  54:	00005918 	andeq	r5, r0, r8, lsl r9
	led_init();
  58:	08010200 	stmdaeq	r1, {r9}
	uart_init(CONFIG_UART_BAUD_RATE);
  5c:	000002f8 	strdeq	r0, [r0], -r8
  60:	22050202 	andcs	r0, r5, #536870912	; 0x20000000
	button_init();
  64:	05000003 	streq	r0, [r0, #-3]
	printf("The start of the HEAP segment: 0x%08X\n", start_of_heap_get());
  68:	00000445 	andeq	r0, r0, r5, asr #8
  6c:	73193902 	tstvc	r9, #32768	; 0x8000
  70:	02000000 	andeq	r0, r0, #0
	dynamic_arr_1 = (uint32_t *)malloc(sizeof(uint32_t)*10);
  74:	02080702 	andeq	r0, r8, #524288	; 0x80000
  78:	04020000 	streq	r0, [r2], #-0
  7c:	0000f905 	andeq	pc, r0, r5, lsl #18
	for(i = 0; i < 10; i++){
  80:	01700500 	cmneq	r0, r0, lsl #10
		dynamic_arr_1[i] = static_arr_1[i];
  84:	4f020000 	svcmi	0x00020000
  88:	00008d19 	andeq	r8, r0, r9, lsl sp
  8c:	07040200 	streq	r0, [r4, -r0, lsl #4]
  90:	000001e9 	andeq	r0, r0, r9, ror #3
  94:	63070802 	movwvs	r0, #30722	; 0x7802
  98:	05000000 	streq	r0, [r0, #-0]
	for(i = 0; i < 10; i++){
  9c:	0000024b 	andeq	r0, r0, fp, asr #4
  a0:	a7192203 	ldrge	r2, [r9, -r3, lsl #4]
  a4:	06000000 	streq	r0, [r0], -r0
	dynamic_arr_2 = (uint16_t *)malloc(sizeof(uint16_t)*4);
  a8:	0000ad04 	andeq	sl, r0, r4, lsl #26
  ac:	04070700 	streq	r0, [r7], #-1792	; 0xfffff900
  b0:	cb050000 	blgt	140008 <main+0x13fff4>
	for(i = 0; i < 4; i++){
  b4:	04000002 	streq	r0, [r0], #-2
		dynamic_arr_2[i] = static_arr_2[i];
  b8:	007a0e2c 	rsbseq	r0, sl, ip, lsr #28
  bc:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
  c0:	04000004 	streq	r0, [r0], #-4
  c4:	007a0e72 	rsbseq	r0, sl, r2, ror lr
  c8:	5a080000 	bpl	200008 <main+0x1ffff4>
  cc:	05000002 	streq	r0, [r0, #-2]
	for(i = 0; i < 4; i++){
  d0:	25170165 	ldrcs	r0, [r7, #-357]	; 0xfffffe9b
  d4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  d8:	03a60404 			; <UNDEFINED> instruction: 0x03a60404
	printf("\n dynamic_arr_1[ ] = {\n");
  dc:	000000f9 	strdeq	r0, [r0], -r9
  e0:	0002450a 	andeq	r4, r2, sl, lsl #10
	for(i = 0; i < 10; i++){
  e4:	0ca80400 	cfstrseq	mvf0, [r8]
		printf("0x%08X\n", dynamic_arr_1[i]);
  e8:	000000ca 	andeq	r0, r0, sl, asr #1
  ec:	0001d20a 	andeq	sp, r1, sl, lsl #4
  f0:	13a90400 			; <UNDEFINED> instruction: 0x13a90400
  f4:	000000f9 	strdeq	r0, [r0], -r9
  f8:	00590b00 	subseq	r0, r9, r0, lsl #22
	for(i = 0; i < 10; i++){
  fc:	01090000 	mrseq	r0, (UNDEF: 9)
 100:	250c0000 	strcs	r0, [ip, #-0]
 104:	03000000 	movweq	r0, #0
	printf("}\n");
 108:	04080d00 	streq	r0, [r8], #-3328	; 0xfffff300
	printf("\n dynamic_arr_2[ ] = {\n");
 10c:	012d09a3 	smulwbeq	sp, r3, r9
 110:	ff0e0000 			; <UNDEFINED> instruction: 0xff0e0000
	for(i = 0; i < 4; i++){
 114:	04000003 	streq	r0, [r0], #-3
		printf("0x%04X\n", dynamic_arr_2[i]);
 118:	002c07a5 	eoreq	r0, ip, r5, lsr #15
 11c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 120:	0000040e 	andeq	r0, r0, lr, lsl #8
 124:	d705aa04 	strle	sl, [r5, -r4, lsl #20]
 128:	04000000 	streq	r0, [r0], #-0
	for(i = 0; i < 4; i++){
 12c:	034a0500 	movteq	r0, #42240	; 0xa500
 130:	ab040000 	blge	100138 <main+0x100124>
 134:	00010903 	andeq	r0, r1, r3, lsl #18
	printf("}\n");
 138:	01810500 	orreq	r0, r1, r0, lsl #10
	free(dynamic_arr_1);
 13c:	af040000 	svcge	0x00040000
 140:	00009b1b 	andeq	r9, r0, fp, lsl fp
	dynamic_arr_3 = (uint8_t *)malloc(sizeof(uint16_t)*4);
 144:	06040f00 	streq	r0, [r4], -r0, lsl #30
 148:	00014d04 	andeq	r4, r1, r4, lsl #26
	for(i = 0; i < 4; i++){
 14c:	08010200 	stmdaeq	r1, {r9}
 150:	00000437 	andeq	r0, r0, r7, lsr r4
		dynamic_arr_3[i] = static_arr_3[i];
 154:	00014d10 	andeq	r4, r1, r0, lsl sp
 158:	053b0500 	ldreq	r0, [fp, #-1280]!	; 0xfffffb00
 15c:	16060000 	strne	r0, [r6], -r0
 160:	00008d19 	andeq	r8, r0, r9, lsl sp
 164:	01921100 	orrseq	r1, r2, r0, lsl #2
	for(i = 0; i < 4; i++){
 168:	06180000 	ldreq	r0, [r8], -r0
 16c:	01bf082f 			; <UNDEFINED> instruction: 0x01bf082f
 170:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
	printf("\n dynamic_arr_3[ ] = {\n");
 174:	06000004 	streq	r0, [r0], -r4
 178:	01bf1331 			; <UNDEFINED> instruction: 0x01bf1331
	for(i = 0; i < 4; i++){
 17c:	12000000 	andne	r0, r0, #0
		printf("0x%02X\n", dynamic_arr_3[i]);
 180:	06006b5f 			; <UNDEFINED> instruction: 0x06006b5f
 184:	002c0732 	eoreq	r0, ip, r2, lsr r7
 188:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
 18c:	000003ea 	andeq	r0, r0, sl, ror #7
 190:	2c0b3206 	sfmcs	f3, 4, [fp], {6}
	for(i = 0; i < 4; i++){
 194:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 198:	00017b0e 	andeq	r7, r1, lr, lsl #22
 19c:	14320600 	ldrtne	r0, [r2], #-1536	; 0xfffffa00
	printf("}\n");
 1a0:	0000002c 	andeq	r0, r0, ip, lsr #32
	free(dynamic_arr_2);
 1a4:	05790e0c 	ldrbeq	r0, [r9, #-3596]!	; 0xfffff1f4
 1a8:	32060000 	andcc	r0, r6, #0
	free(dynamic_arr_3);
 1ac:	00002c1b 	andeq	r2, r0, fp, lsl ip
		led_set();
 1b0:	5f121000 	svcpl	0x00121000
		for(i = 0; i < 50000; i++){ }
 1b4:	33060078 	movwcc	r0, #24696	; 0x6078
 1b8:	0001c50b 	andeq	ip, r1, fp, lsl #10
 1bc:	06001400 	streq	r1, [r0], -r0, lsl #8
 1c0:	00016504 	andeq	r6, r1, r4, lsl #10
 1c4:	01590b00 	cmpeq	r9, r0, lsl #22
 1c8:	01d50000 	bicseq	r0, r5, r0
		led_clear();
 1cc:	250c0000 	strcs	r0, [ip, #-0]
		for(i = 0; i < 50000; i++){ }
 1d0:	00000000 	andeq	r0, r0, r0
 1d4:	01c01100 	biceq	r1, r0, r0, lsl #2
 1d8:	06240000 	strteq	r0, [r4], -r0
 1dc:	02580837 	subseq	r0, r8, #3604480	; 0x370000
 1e0:	9d0e0000 	stcls	0, cr0, [lr, #-0]
		led_set();
 1e4:	06000000 	streq	r0, [r0], -r0
 1e8:	002c0939 	eoreq	r0, ip, r9, lsr r9
 1ec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 1f0:	0000043c 	andeq	r0, r0, ip, lsr r4
 1f4:	2c093a06 			; <UNDEFINED> instruction: 0x2c093a06
 1f8:	04000000 	streq	r0, [r0], #-0
 1fc:	0000cc0e 	andeq	ip, r0, lr, lsl #24
 200:	093b0600 	ldmdbeq	fp!, {r9, sl}
 204:	0000002c 	andeq	r0, r0, ip, lsr #32
 208:	05f70e08 	ldrbeq	r0, [r7, #3592]!	; 0xe08
 20c:	3c060000 	stccc	0, cr0, [r6], {-0}
 210:	00002c09 	andeq	r2, r0, r9, lsl #24
 214:	a50e0c00 	strge	r0, [lr, #-3072]	; 0xfffff400
 218:	06000002 	streq	r0, [r0], -r2
 21c:	002c093d 	eoreq	r0, ip, sp, lsr r9
 220:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
 224:	00000276 	andeq	r0, r0, r6, ror r2
 228:	2c093e06 	stccs	14, cr3, [r9], {6}
 22c:	14000000 	strne	r0, [r0], #-0
 230:	00057e0e 	andeq	r7, r5, lr, lsl #28
 234:	093f0600 	ldmdbeq	pc!, {r9, sl}	; <UNPREDICTABLE>
 238:	0000002c 	andeq	r0, r0, ip, lsr #32
 23c:	032c0e18 			; <UNDEFINED> instruction: 0x032c0e18
 240:	40060000 	andmi	r0, r6, r0
 244:	00002c09 	andeq	r2, r0, r9, lsl #24
 248:	b90e1c00 	stmdblt	lr, {sl, fp, ip}
 24c:	06000005 	streq	r0, [r0], -r5
 250:	002c0941 	eoreq	r0, ip, r1, asr #18
 254:	00200000 	eoreq	r0, r0, r0
 258:	0000db13 	andeq	sp, r0, r3, lsl fp
 25c:	06010800 	streq	r0, [r1], -r0, lsl #16
 260:	029d084a 	addseq	r0, sp, #4849664	; 0x4a0000
 264:	630e0000 	movwvs	r0, #57344	; 0xe000
 268:	06000001 	streq	r0, [r0], -r1
 26c:	029d0a4b 	addseq	r0, sp, #307200	; 0x4b000
 270:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 274:	00000000 	andeq	r0, r0, r0
 278:	9d094c06 	stcls	12, cr4, [r9, #-24]	; 0xffffffe8
 27c:	80000002 	andhi	r0, r0, r2
 280:	00047114 	andeq	r7, r4, r4, lsl r1
 284:	0a4e0600 	beq	1381a8c <main+0x1381a78>
 288:	00000159 	andeq	r0, r0, r9, asr r1
 28c:	09140100 	ldmdbeq	r4, {r8}
 290:	06000001 	streq	r0, [r0], -r1
 294:	01590a51 	cmpeq	r9, r1, asr sl
 298:	01040000 	mrseq	r0, (UNDEF: 4)
 29c:	01450b00 	cmpeq	r5, r0, lsl #22
 2a0:	02ad0000 	adceq	r0, sp, #0
 2a4:	250c0000 	strcs	r0, [ip, #-0]
 2a8:	1f000000 	svcne	0x00000000
 2ac:	02ae1300 	adceq	r1, lr, #0, 6
 2b0:	01900000 	orrseq	r0, r0, r0
 2b4:	f0085d06 			; <UNDEFINED> instruction: 0xf0085d06
 2b8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 2bc:	0000045e 	andeq	r0, r0, lr, asr r4
 2c0:	f0125e06 			; <UNDEFINED> instruction: 0xf0125e06
 2c4:	00000002 	andeq	r0, r0, r2
 2c8:	0003ba0e 	andeq	fp, r3, lr, lsl #20
 2cc:	065f0600 	ldrbeq	r0, [pc], -r0, lsl #12
 2d0:	0000002c 	andeq	r0, r0, ip, lsr #32
 2d4:	016b0e04 	cmneq	fp, r4, lsl #28
 2d8:	61060000 	mrsvs	r0, (UNDEF: 6)
 2dc:	0002f609 	andeq	pc, r2, r9, lsl #12
 2e0:	db0e0800 	blle	382008 <main+0x381ff4>
 2e4:	06000000 	streq	r0, [r0], -r0
 2e8:	02581e62 	subseq	r1, r8, #1568	; 0x620
 2ec:	00880000 	addeq	r0, r8, r0
 2f0:	02ad0406 	adceq	r0, sp, #100663296	; 0x6000000
 2f4:	060b0000 	streq	r0, [fp], -r0
 2f8:	06000003 	streq	r0, [r0], -r3
 2fc:	0c000003 	stceq	0, cr0, [r0], {3}
 300:	00000025 	andeq	r0, r0, r5, lsr #32
 304:	0406001f 	streq	r0, [r6], #-31	; 0xffffffe1
 308:	0000030c 	andeq	r0, r0, ip, lsl #6
 30c:	03361115 	teqeq	r6, #1073741829	; 0x40000005
 310:	06080000 	streq	r0, [r8], -r0
 314:	03350875 	teqeq	r5, #7667712	; 0x750000
 318:	c60e0000 	strgt	r0, [lr], -r0
 31c:	06000000 	streq	r0, [r0], -r0
 320:	03351176 	teqeq	r5, #-2147483619	; 0x8000001d
 324:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 328:	0000000c 	andeq	r0, r0, ip
 32c:	2c067706 	stccs	7, cr7, [r6], {6}
 330:	04000000 	streq	r0, [r0], #-0
 334:	59040600 	stmdbpl	r4, {r9, sl}
 338:	11000000 	mrsne	r0, (UNDEF: 0)
 33c:	00000355 	andeq	r0, r0, r5, asr r3
 340:	08b50668 	ldmeq	r5!, {r3, r5, r6, r9, sl}
 344:	0000047e 	andeq	r0, r0, lr, ror r4
 348:	00705f12 	rsbseq	r5, r0, r2, lsl pc
 34c:	3512b606 	ldrcc	fp, [r2, #-1542]	; 0xfffff9fa
 350:	00000003 	andeq	r0, r0, r3
 354:	00725f12 	rsbseq	r5, r2, r2, lsl pc
 358:	2c07b706 	stccs	7, cr11, [r7], {6}
 35c:	04000000 	streq	r0, [r0], #-0
 360:	00775f12 	rsbseq	r5, r7, r2, lsl pc
 364:	2c07b806 	stccs	8, cr11, [r7], {6}
 368:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 36c:	0001020e 	andeq	r0, r1, lr, lsl #4
 370:	09b90600 	ldmibeq	r9!, {r9, sl}
 374:	00000060 	andeq	r0, r0, r0, rrx
 378:	01fb0e0c 	mvnseq	r0, ip, lsl #28
 37c:	ba060000 	blt	180384 <main+0x180370>
 380:	00006009 	andeq	r6, r0, r9
 384:	5f120e00 	svcpl	0x00120e00
 388:	06006662 	streq	r6, [r0], -r2, ror #12
 38c:	030d11bb 	movweq	r1, #53691	; 0xd1bb
 390:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
 394:	0000007a 	andeq	r0, r0, sl, ror r0
 398:	2c07bc06 	stccs	12, cr11, [r7], {6}
 39c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 3a0:	0000e90e 	andeq	lr, r0, lr, lsl #18
 3a4:	0ac30600 	beq	ff0c1bac <main+0xff0c1b98>
 3a8:	00000145 	andeq	r0, r0, r5, asr #2
 3ac:	01b00e1c 	lslseq	r0, ip, lr
 3b0:	c5060000 	strgt	r0, [r6, #-0]
 3b4:	0005f01d 	andeq	pc, r5, sp, lsl r0	; <UNPREDICTABLE>
 3b8:	6f0e2000 	svcvs	0x000e2000
 3bc:	06000002 	streq	r0, [r0], -r2
 3c0:	061a1dc7 	ldreq	r1, [sl], -r7, asr #27
 3c4:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
 3c8:	00000416 	andeq	r0, r0, r6, lsl r4
 3cc:	3e0dca06 	vmlacc.f32	s24, s26, s12
 3d0:	28000006 	stmdacs	r0, {r1, r2}
 3d4:	0005d30e 	andeq	sp, r5, lr, lsl #6
 3d8:	09cb0600 	stmibeq	fp, {r9, sl}^
 3dc:	00000658 	andeq	r0, r0, r8, asr r6
 3e0:	755f122c 	ldrbvc	r1, [pc, #-556]	; 1bc <.debug_info+0x1bc>
 3e4:	ce060062 	cdpgt	0, 0, cr0, cr6, cr2, {3}
 3e8:	00030d11 	andeq	r0, r3, r1, lsl sp
 3ec:	5f123000 	svcpl	0x00123000
 3f0:	06007075 			; <UNDEFINED> instruction: 0x06007075
 3f4:	033512cf 	teqeq	r5, #-268435444	; 0xf000000c
 3f8:	12380000 	eorsne	r0, r8, #0
 3fc:	0072755f 	rsbseq	r7, r2, pc, asr r5
 400:	2c07d006 	stccs	0, cr13, [r7], {6}
 404:	3c000000 	stccc	0, cr0, [r0], {-0}
 408:	0000c00e 	andeq	ip, r0, lr
 40c:	11d30600 	bicsne	r0, r3, r0, lsl #12
 410:	0000065e 	andeq	r0, r0, lr, asr r6
 414:	05ab0e40 	streq	r0, [fp, #3648]!	; 0xe40
 418:	d4060000 	strle	r0, [r6], #-0
 41c:	00066e11 	andeq	r6, r6, r1, lsl lr
 420:	5f124300 	svcpl	0x00124300
 424:	0600626c 	streq	r6, [r0], -ip, ror #4
 428:	030d11d7 	movweq	r1, #53719	; 0xd1d7
 42c:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
 430:	00000118 	andeq	r0, r0, r8, lsl r1
 434:	2c07da06 			; <UNDEFINED> instruction: 0x2c07da06
 438:	4c000000 	stcmi	0, cr0, [r0], {-0}
 43c:	0001320e 	andeq	r3, r1, lr, lsl #4
 440:	0adb0600 	beq	ff6c1c48 <main+0xff6c1c34>
 444:	000000b2 	strheq	r0, [r0], -r2
 448:	002f0e50 	eoreq	r0, pc, r0, asr lr	; <UNPREDICTABLE>
 44c:	de060000 	cdple	0, 0, cr0, cr6, cr0, {0}
 450:	00049c12 	andeq	r9, r4, r2, lsl ip
 454:	610e5400 	tstvs	lr, r0, lsl #8
 458:	06000002 	streq	r0, [r0], -r2
 45c:	01390ce2 	teqeq	r9, r2, ror #25
 460:	0e580000 	cdpeq	0, 5, cr0, cr8, cr0, {0}
 464:	0000035d 	andeq	r0, r0, sp, asr r3
 468:	2d0ee406 	cfstrscs	mvf14, [lr, #-24]	; 0xffffffe8
 46c:	5c000001 	stcpl	0, cr0, [r0], {1}
 470:	0002670e 	andeq	r6, r2, lr, lsl #14
 474:	09e50600 	stmibeq	r5!, {r9, sl}^
 478:	0000002c 	andeq	r0, r0, ip, lsr #32
 47c:	2c160064 	ldccs	0, cr0, [r6], {100}	; 0x64
 480:	9c000000 	stcls	0, cr0, [r0], {-0}
 484:	17000004 	strne	r0, [r0, -r4]
 488:	0000049c 	muleq	r0, ip, r4
 48c:	00014517 	andeq	r4, r1, r7, lsl r5
 490:	01471700 	cmpeq	r7, r0, lsl #14
 494:	2c170000 	ldccs	0, cr0, [r7], {-0}
 498:	00000000 	andeq	r0, r0, r0
 49c:	04a70406 	strteq	r0, [r7], #1030	; 0x406
 4a0:	9c100000 	ldcls	0, cr0, [r0], {-0}
 4a4:	18000004 	stmdane	r0, {r2}
 4a8:	000003f2 	strdeq	r0, [r0], -r2
 4ac:	60060428 	andvs	r0, r6, r8, lsr #8
 4b0:	05f00802 	ldrbeq	r0, [r0, #2050]!	; 0x802
 4b4:	30190000 	andscc	r0, r9, r0
 4b8:	06000004 	streq	r0, [r0], -r4
 4bc:	2c070262 	sfmcs	f0, 4, [r7], {98}	; 0x62
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	00011119 	andeq	r1, r1, r9, lsl r1
 4c8:	02670600 	rsbeq	r0, r7, #0, 12
 4cc:	0006ca0b 	andeq	ip, r6, fp, lsl #20
 4d0:	d9190400 	ldmdble	r9, {sl}
 4d4:	06000001 	streq	r0, [r0], -r1
 4d8:	ca140267 	bgt	500e7c <main+0x500e68>
 4dc:	08000006 	stmdaeq	r0, {r1, r2}
 4e0:	00018a19 	andeq	r8, r1, r9, lsl sl
 4e4:	02670600 	rsbeq	r0, r7, #0, 12
 4e8:	0006ca1e 	andeq	ip, r6, lr, lsl sl
 4ec:	b5190c00 	ldrlt	r0, [r9, #-3072]	; 0xfffff400
 4f0:	06000003 	streq	r0, [r0], -r3
 4f4:	2c080269 	sfmcs	f0, 4, [r8], {105}	; 0x69
 4f8:	10000000 	andne	r0, r0, r0
 4fc:	00001a19 	andeq	r1, r0, r9, lsl sl
 500:	026a0600 	rsbeq	r0, sl, #0, 12
 504:	0008ca08 	andeq	ip, r8, r8, lsl #20
 508:	d1191400 	tstle	r9, r0, lsl #8
 50c:	06000003 	streq	r0, [r0], -r3
 510:	2c07026d 	sfmcs	f0, 4, [r7], {109}	; 0x6d
 514:	30000000 	andcc	r0, r0, r0
 518:	0003bf19 	andeq	fp, r3, r9, lsl pc
 51c:	026e0600 	rsbeq	r0, lr, #0, 12
 520:	0008df16 	andeq	sp, r8, r6, lsl pc
 524:	c0193400 	andsgt	r3, r9, r0, lsl #8
 528:	06000002 	streq	r0, [r0], -r2
 52c:	2c070270 	sfmcs	f0, 4, [r7], {112}	; 0x70
 530:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 534:	0003c719 	andeq	ip, r3, r9, lsl r7
 538:	02720600 	rsbseq	r0, r2, #0, 12
 53c:	0008f00a 	andeq	pc, r8, sl
 540:	3d193c00 	ldccc	12, cr3, [r9, #-0]
 544:	06000002 	streq	r0, [r0], -r2
 548:	bf130275 	svclt	0x00130275
 54c:	40000001 	andmi	r0, r0, r1
 550:	0001b619 	andeq	fp, r1, r9, lsl r6
 554:	02760600 	rsbseq	r0, r6, #0, 12
 558:	00002c07 	andeq	r2, r0, r7, lsl #24
 55c:	ed194400 	cfldrs	mvf4, [r9, #-0]
 560:	06000005 	streq	r0, [r0], -r5
 564:	bf130277 	svclt	0x00130277
 568:	48000001 	stmdami	r0, {r0}
 56c:	0002d219 	andeq	sp, r2, r9, lsl r2
 570:	02780600 	rsbseq	r0, r8, #0, 12
 574:	0008f614 	andeq	pc, r8, r4, lsl r6	; <UNPREDICTABLE>
 578:	e1194c00 	tst	r9, r0, lsl #24
 57c:	06000001 	streq	r0, [r0], -r1
 580:	2c07027b 	sfmcs	f0, 4, [r7], {123}	; 0x7b
 584:	50000000 	andpl	r0, r0, r0
 588:	00012a19 	andeq	r2, r1, r9, lsl sl
 58c:	027c0600 	rsbseq	r0, ip, #0, 12
 590:	00014709 	andeq	r4, r1, r9, lsl #14
 594:	14195400 	ldrne	r5, [r9], #-1024	; 0xfffffc00
 598:	06000003 	streq	r0, [r0], -r3
 59c:	a507029f 	strge	r0, [r7, #-671]	; 0xfffffd61
 5a0:	58000008 	stmdapl	r0, {r3}
 5a4:	0002ae1a 	andeq	sl, r2, sl, lsl lr
 5a8:	02a30600 	adceq	r0, r3, #0, 12
 5ac:	0002f013 	andeq	pc, r2, r3, lsl r0	; <UNPREDICTABLE>
 5b0:	1a014800 	bne	525b8 <main+0x525a4>
 5b4:	0000021b 	andeq	r0, r0, fp, lsl r2
 5b8:	1202a406 	andne	sl, r2, #100663296	; 0x6000000
 5bc:	000002ad 	andeq	r0, r0, sp, lsr #5
 5c0:	a11a014c 	tstge	sl, ip, asr #2
 5c4:	06000005 	streq	r0, [r0], -r5
 5c8:	070c02a8 	streq	r0, [ip, -r8, lsr #5]
 5cc:	dc000009 	stcle	0, cr0, [r0], {9}
 5d0:	00f11a02 	rscseq	r1, r1, r2, lsl #20
 5d4:	ad060000 	stcge	0, cr0, [r6, #-0]
 5d8:	068b1002 	streq	r1, [fp], r2
 5dc:	02e00000 	rsceq	r0, r0, #0
 5e0:	0000d61a 	andeq	sp, r0, sl, lsl r6
 5e4:	02af0600 	adceq	r0, pc, #0, 12
 5e8:	0009130a 	andeq	r1, r9, sl, lsl #6
 5ec:	0002ec00 	andeq	lr, r2, r0, lsl #24
 5f0:	047e0406 	ldrbteq	r0, [lr], #-1030	; 0xfffffbfa
 5f4:	2c160000 	ldccs	0, cr0, [r6], {-0}
 5f8:	14000000 	strne	r0, [r0], #-0
 5fc:	17000006 	strne	r0, [r0, -r6]
 600:	0000049c 	muleq	r0, ip, r4
 604:	00014517 	andeq	r4, r1, r7, lsl r5
 608:	06141700 	ldreq	r1, [r4], -r0, lsl #14
 60c:	2c170000 	ldccs	0, cr0, [r7], {-0}
 610:	00000000 	andeq	r0, r0, r0
 614:	01540406 	cmpeq	r4, r6, lsl #8
 618:	04060000 	streq	r0, [r6], #-0
 61c:	000005f6 	strdeq	r0, [r0], -r6
 620:	0000be16 	andeq	fp, r0, r6, lsl lr
 624:	00063e00 	andeq	r3, r6, r0, lsl #28
 628:	049c1700 	ldreq	r1, [ip], #1792	; 0x700
 62c:	45170000 	ldrmi	r0, [r7, #-0]
 630:	17000001 	strne	r0, [r0, -r1]
 634:	000000be 	strheq	r0, [r0], -lr
 638:	00002c17 	andeq	r2, r0, r7, lsl ip
 63c:	04060000 	streq	r0, [r6], #-0
 640:	00000620 	andeq	r0, r0, r0, lsr #12
 644:	00002c16 	andeq	r2, r0, r6, lsl ip
 648:	00065800 	andeq	r5, r6, r0, lsl #16
 64c:	049c1700 	ldreq	r1, [ip], #1792	; 0x700
 650:	45170000 	ldrmi	r0, [r7, #-0]
 654:	00000001 	andeq	r0, r0, r1
 658:	06440406 	strbeq	r0, [r4], -r6, lsl #8
 65c:	590b0000 	stmdbpl	fp, {}	; <UNPREDICTABLE>
 660:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
 664:	0c000006 	stceq	0, cr0, [r0], {6}
 668:	00000025 	andeq	r0, r0, r5, lsr #32
 66c:	590b0002 	stmdbpl	fp, {r1}
 670:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
 674:	0c000006 	stceq	0, cr0, [r0], {6}
 678:	00000025 	andeq	r0, r0, r5, lsr #32
 67c:	43080000 	movwmi	r0, #32768	; 0x8000
 680:	06000003 	streq	r0, [r0], -r3
 684:	3b1a011f 	blcc	680b08 <main+0x680af4>
 688:	1b000003 	blne	69c <.debug_info+0x69c>
 68c:	00000588 	andeq	r0, r0, r8, lsl #11
 690:	0123060c 			; <UNDEFINED> instruction: 0x0123060c
 694:	0006c408 	andeq	ip, r6, r8, lsl #8
 698:	045e1900 	ldrbeq	r1, [lr], #-2304	; 0xfffff700
 69c:	25060000 	strcs	r0, [r6, #-0]
 6a0:	06c41101 	strbeq	r1, [r4], r1, lsl #2
 6a4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
 6a8:	00000201 	andeq	r0, r0, r1, lsl #4
 6ac:	07012606 	streq	r2, [r1, -r6, lsl #12]
 6b0:	0000002c 	andeq	r0, r0, ip, lsr #32
 6b4:	033d1904 	teqeq	sp, #4, 18	; 0x10000
 6b8:	27060000 	strcs	r0, [r6, -r0]
 6bc:	06ca0b01 	strbeq	r0, [sl], r1, lsl #22
 6c0:	00080000 	andeq	r0, r8, r0
 6c4:	068b0406 	streq	r0, [fp], r6, lsl #8
 6c8:	04060000 	streq	r0, [r6], #-0
 6cc:	0000067e 	andeq	r0, r0, lr, ror r6
 6d0:	0000121b 	andeq	r1, r0, fp, lsl r2
 6d4:	3f060e00 	svccc	0x00060e00
 6d8:	07090801 	streq	r0, [r9, -r1, lsl #16]
 6dc:	f9190000 			; <UNDEFINED> instruction: 0xf9190000
 6e0:	06000003 	streq	r0, [r0], -r3
 6e4:	09120140 	ldmdbeq	r2, {r6, r8}
 6e8:	00000007 	andeq	r0, r0, r7
 6ec:	00045819 	andeq	r5, r4, r9, lsl r8
 6f0:	01410600 	cmpeq	r1, r0, lsl #12
 6f4:	00070912 	andeq	r0, r7, r2, lsl r9
 6f8:	36190600 	ldrcc	r0, [r9], -r0, lsl #12
 6fc:	06000005 	streq	r0, [r0], -r5
 700:	73120142 	tstvc	r2, #-2147483632	; 0x80000010
 704:	0c000000 	stceq	0, cr0, [r0], {-0}
 708:	00730b00 	rsbseq	r0, r3, r0, lsl #22
 70c:	07190000 	ldreq	r0, [r9, -r0]
 710:	250c0000 	strcs	r0, [ip, #-0]
 714:	02000000 	andeq	r0, r0, #0
 718:	06d01c00 	ldrbeq	r1, [r0], r0, lsl #24
 71c:	2e070280 	cdpcs	2, 0, cr0, cr7, cr0, {4}
 720:	19000008 	stmdbne	r0, {r3}
 724:	0000056c 	andeq	r0, r0, ip, ror #10
 728:	18028206 	stmdane	r2, {r1, r2, r9, pc}
 72c:	00000025 	andeq	r0, r0, r5, lsr #32
 730:	04641900 	strbteq	r1, [r4], #-2304	; 0xfffff700
 734:	83060000 	movwhi	r0, #24576	; 0x6000
 738:	01471202 	cmpeq	r7, r2, lsl #4
 73c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
 740:	00000230 	andeq	r0, r0, r0, lsr r2
 744:	10028406 	andne	r8, r2, r6, lsl #8
 748:	0000082e 	andeq	r0, r0, lr, lsr #16
 74c:	05c41908 	strbeq	r1, [r4, #2312]	; 0x908
 750:	85060000 	strhi	r0, [r6, #-0]
 754:	01d51702 	bicseq	r1, r5, r2, lsl #14
 758:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
 75c:	0000019a 	muleq	r0, sl, r1
 760:	0f028606 	svceq	0x00028606
 764:	0000002c 	andeq	r0, r0, ip, lsr #32
 768:	06011948 	streq	r1, [r1], -r8, asr #18
 76c:	87060000 	strhi	r0, [r6, -r0]
 770:	00942c02 	addseq	r2, r4, r2, lsl #24
 774:	19500000 	ldmdbne	r0, {}^	; <UNPREDICTABLE>
 778:	000005da 	ldrdeq	r0, [r0], -sl
 77c:	1a028806 	bne	a279c <main+0xa2788>
 780:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 784:	03a81958 			; <UNDEFINED> instruction: 0x03a81958
 788:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
 78c:	012d1602 			; <UNDEFINED> instruction: 0x012d1602
 790:	19680000 	stmdbne	r8!, {}^	; <UNPREDICTABLE>
 794:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 798:	16028a06 	strne	r8, [r2], -r6, lsl #20
 79c:	0000012d 	andeq	r0, r0, sp, lsr #2
 7a0:	02dc1970 	sbcseq	r1, ip, #112, 18	; 0x1c0000
 7a4:	8b060000 	blhi	1807ac <main+0x180798>
 7a8:	012d1602 			; <UNDEFINED> instruction: 0x012d1602
 7ac:	19780000 	ldmdbne	r8!, {}^	; <UNPREDICTABLE>
 7b0:	00000597 	muleq	r0, r7, r5
 7b4:	10028c06 	andne	r8, r2, r6, lsl #24
 7b8:	0000083e 	andeq	r0, r0, lr, lsr r8
 7bc:	02241980 	eoreq	r1, r4, #128, 18	; 0x200000
 7c0:	8d060000 	stchi	0, cr0, [r6, #-0]
 7c4:	084e1002 	stmdaeq	lr, {r1, ip}^
 7c8:	19880000 	stmibne	r8, {}	; <UNPREDICTABLE>
 7cc:	00000543 	andeq	r0, r0, r3, asr #10
 7d0:	0f028e06 	svceq	0x00028e06
 7d4:	0000002c 	andeq	r0, r0, ip, lsr #32
 7d8:	015519a0 	cmpeq	r5, r0, lsr #19
 7dc:	8f060000 	svchi	0x00060000
 7e0:	012d1602 			; <UNDEFINED> instruction: 0x012d1602
 7e4:	19a40000 	stmibne	r4!, {}	; <UNPREDICTABLE>
 7e8:	0000008e 	andeq	r0, r0, lr, lsl #1
 7ec:	16029006 	strne	r9, [r2], -r6
 7f0:	0000012d 	andeq	r0, r0, sp, lsr #2
 7f4:	013a19ac 	teqeq	sl, ip, lsr #19
 7f8:	91060000 	mrsls	r0, (UNDEF: 6)
 7fc:	012d1602 			; <UNDEFINED> instruction: 0x012d1602
 800:	19b40000 	ldmibne	r4!, {}	; <UNPREDICTABLE>
 804:	00000043 	andeq	r0, r0, r3, asr #32
 808:	16029206 	strne	r9, [r2], -r6, lsl #4
 80c:	0000012d 	andeq	r0, r0, sp, lsr #2
 810:	005219bc 	ldrheq	r1, [r2], #-156	; 0xffffff64
 814:	93060000 	movwls	r0, #24576	; 0x6000
 818:	012d1602 			; <UNDEFINED> instruction: 0x012d1602
 81c:	19c40000 	stmibne	r4, {}^	; <UNPREDICTABLE>
 820:	00000319 	andeq	r0, r0, r9, lsl r3
 824:	08029406 	stmdaeq	r2, {r1, r2, sl, ip, pc}
 828:	0000002c 	andeq	r0, r0, ip, lsr #32
 82c:	4d0b00cc 	stcmi	0, cr0, [fp, #-816]	; 0xfffffcd0
 830:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
 834:	0c000008 	stceq	0, cr0, [r0], {8}
 838:	00000025 	andeq	r0, r0, r5, lsr #32
 83c:	4d0b0019 	stcmi	0, cr0, [fp, #-100]	; 0xffffff9c
 840:	4e000001 	cdpmi	0, 0, cr0, cr0, cr1, {0}
 844:	0c000008 	stceq	0, cr0, [r0], {8}
 848:	00000025 	andeq	r0, r0, r5, lsr #32
 84c:	4d0b0007 	stcmi	0, cr0, [fp, #-28]	; 0xffffffe4
 850:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
 854:	0c000008 	stceq	0, cr0, [r0], {8}
 858:	00000025 	andeq	r0, r0, r5, lsr #32
 85c:	f01c0017 			; <UNDEFINED> instruction: 0xf01c0017
 860:	07029906 	streq	r9, [r2, -r6, lsl #18]
 864:	00000885 	andeq	r0, r0, r5, lsl #17
 868:	00028c19 	andeq	r8, r2, r9, lsl ip
 86c:	029c0600 	addseq	r0, ip, #0, 12
 870:	0008851b 	andeq	r8, r8, fp, lsl r5
 874:	8e190000 	cdphi	0, 1, cr0, cr9, cr0, {0}
 878:	06000005 	streq	r0, [r0], -r5
 87c:	9518029d 	ldrls	r0, [r8, #-669]	; 0xfffffd63
 880:	78000008 	stmdavc	r0, {r3}
 884:	03350b00 	teqeq	r5, #0, 22
 888:	08950000 	ldmeq	r5, {}	; <UNPREDICTABLE>
 88c:	250c0000 	strcs	r0, [ip, #-0]
 890:	1d000000 	stcne	0, cr0, [r0, #-0]
 894:	00250b00 	eoreq	r0, r5, r0, lsl #22
 898:	08a50000 	stmiaeq	r5!, {}	; <UNPREDICTABLE>
 89c:	250c0000 	strcs	r0, [ip, #-0]
 8a0:	1d000000 	stcne	0, cr0, [r0, #-0]
 8a4:	06f01d00 	ldrbteq	r1, [r0], r0, lsl #26
 8a8:	ca03027e 	bgt	c12a8 <main+0xc1294>
 8ac:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
 8b0:	000003f2 	strdeq	r0, [r0], -r2
 8b4:	0b029506 	bleq	a5cd4 <main+0xa5cc0>
 8b8:	00000719 	andeq	r0, r0, r9, lsl r7
 8bc:	0005b11e 	andeq	fp, r5, lr, lsl r1
 8c0:	029e0600 	addseq	r0, lr, #0, 12
 8c4:	00085e0b 	andeq	r5, r8, fp, lsl #28
 8c8:	4d0b0000 	stcmi	0, cr0, [fp, #-0]
 8cc:	da000001 	ble	8d8 <.debug_info+0x8d8>
 8d0:	0c000008 	stceq	0, cr0, [r0], {8}
 8d4:	00000025 	andeq	r0, r0, r5, lsr #32
 8d8:	83070018 	movwhi	r0, #28696	; 0x7018
 8dc:	06000000 	streq	r0, [r0], -r0
 8e0:	0008da04 	andeq	sp, r8, r4, lsl #20
 8e4:	08f01f00 	ldmeq	r0!, {r8, r9, sl, fp, ip}^
 8e8:	9c170000 	ldcls	0, cr0, [r7], {-0}
 8ec:	00000004 	andeq	r0, r0, r4
 8f0:	08e50406 	stmiaeq	r5!, {r1, r2, sl}^
 8f4:	04060000 	streq	r0, [r6], #-0
 8f8:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
 8fc:	0009071f 	andeq	r0, r9, pc, lsl r7
 900:	002c1700 	eoreq	r1, ip, r0, lsl #14
 904:	06000000 	streq	r0, [r0], -r0
 908:	00090d04 	andeq	r0, r9, r4, lsl #26
 90c:	fc040600 	stc2	6, cr0, [r4], {-0}
 910:	0b000008 	bleq	938 <.debug_info+0x938>
 914:	0000067e 	andeq	r0, r0, lr, ror r6
 918:	00000923 	andeq	r0, r0, r3, lsr #18
 91c:	0000250c 	andeq	r2, r0, ip, lsl #10
 920:	20000200 	andcs	r0, r0, r0, lsl #4
 924:	0000041c 	andeq	r0, r0, ip, lsl r4
 928:	17032e06 	strne	r2, [r3, -r6, lsl #28]
 92c:	0000049c 	muleq	r0, ip, r4
 930:	00055020 	andeq	r5, r5, r0, lsr #32
 934:	032f0600 			; <UNDEFINED> instruction: 0x032f0600
 938:	0004a21d 	andeq	sl, r4, sp, lsl r2
 93c:	02b62100 	adcseq	r2, r6, #0, 2
 940:	64070000 	strvs	r0, [r7], #-0
 944:	0001470e 	andeq	r4, r1, lr, lsl #14
 948:	04500500 	ldrbeq	r0, [r0], #-1280	; 0xfffffb00
 94c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
 950:	00004d13 	andeq	r4, r0, r3, lsl sp
 954:	09491000 	stmdbeq	r9, {ip}^
 958:	21050000 	mrscs	r0, (UNDEF: 5)
 95c:	08000001 	stmdaeq	r0, {r0}
 960:	00671424 	rsbeq	r1, r7, r4, lsr #8
 964:	5a100000 	bpl	40096c <main+0x400958>
 968:	05000009 	streq	r0, [r0, #-9]
 96c:	00000563 	andeq	r0, r0, r3, ror #10
 970:	81143008 	tsthi	r4, r8
 974:	04000000 	streq	r0, [r0], #-0
 978:	0000096b 	andeq	r0, r0, fp, ror #18
 97c:	00096b10 	andeq	r6, r9, r0, lsl fp
 980:	014b2200 	mrseq	r2, (UNDEF: 107)
 984:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
 988:	00099314 	andeq	r9, r9, r4, lsl r3
 98c:	00030500 	andeq	r0, r3, r0, lsl #10
 990:	06000000 	streq	r0, [r0], -r0
 994:	00097704 	andeq	r7, r9, r4, lsl #14
 998:	05f22300 	ldrbeq	r2, [r2, #768]!	; 0x300
 99c:	1d010000 	stcne	0, cr0, [r1, #-0]
 9a0:	00002c05 	andeq	r2, r0, r5, lsl #24
 9a4:	00001400 	andeq	r1, r0, r0, lsl #8
 9a8:	00020400 	andeq	r0, r2, r0, lsl #8
 9ac:	1f9c0100 	svcne	0x009c0100
 9b0:	2400000a 	strcs	r0, [r0], #-10
 9b4:	0000047a 	andeq	r0, r0, sl, ror r4
 9b8:	2f111e01 	svccs	0x00111e01
 9bc:	0300000a 	movweq	r0, #10
 9c0:	247fbc91 	ldrbtcs	fp, [pc], #-3217	; 9c8 <.debug_info+0x9c8>
 9c4:	00000487 	andeq	r0, r0, r7, lsl #9
 9c8:	44111f01 	ldrmi	r1, [r1], #-3841	; 0xfffff0ff
 9cc:	0300000a 	movweq	r0, #10
 9d0:	247fb491 	ldrbtcs	fp, [pc], #-1169	; 9d8 <.debug_info+0x9d8>
 9d4:	00000494 	muleq	r0, r4, r4
 9d8:	59102001 	ldmdbpl	r0, {r0, sp}
 9dc:	0300000a 	movweq	r0, #10
 9e0:	247fb091 	ldrbtcs	fp, [pc], #-145	; 9e8 <.debug_info+0x9e8>
 9e4:	000002ea 	andeq	r0, r0, sl, ror #5
 9e8:	5e0c2101 	adfple	f2, f4, f1
 9ec:	0200000a 	andeq	r0, r0, #10
 9f0:	35246c91 	strcc	r6, [r4, #-3217]!	; 0xfffff36f
 9f4:	01000000 	mrseq	r0, (UNDEF: 0)
 9f8:	0a640c22 	beq	1903a88 <main+0x1903a74>
 9fc:	91020000 	mrsls	r0, (UNDEF: 2)
 a00:	03062468 	movweq	r2, #25704	; 0x6468
 a04:	23010000 	movwcs	r0, #4096	; 0x1000
 a08:	000a6a0b 	andeq	r6, sl, fp, lsl #20
 a0c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 a10:	01006925 	tsteq	r0, r5, lsr #18
 a14:	00330f24 	eorseq	r0, r3, r4, lsr #30
 a18:	91030000 	mrsls	r0, (UNDEF: 3)
 a1c:	0b007fac 	bleq	208d4 <main+0x208c0>
 a20:	0000097c 	andeq	r0, r0, ip, ror r9
 a24:	00000a2f 	andeq	r0, r0, pc, lsr #20
 a28:	0000250c 	andeq	r2, r0, ip, lsl #10
 a2c:	10000900 	andne	r0, r0, r0, lsl #18
 a30:	00000a1f 	andeq	r0, r0, pc, lsl sl
 a34:	0009660b 	andeq	r6, r9, fp, lsl #12
 a38:	000a4400 	andeq	r4, sl, r0, lsl #8
 a3c:	00250c00 	eoreq	r0, r5, r0, lsl #24
 a40:	00030000 	andeq	r0, r3, r0
 a44:	000a3410 	andeq	r3, sl, r0, lsl r4
 a48:	09550b00 	ldmdbeq	r5, {r8, r9, fp}^
 a4c:	0a590000 	beq	1640a54 <main+0x1640a40>
 a50:	250c0000 	strcs	r0, [ip, #-0]
 a54:	03000000 	movweq	r0, #0
 a58:	0a491000 	beq	1244a60 <main+0x1244a4c>
 a5c:	04060000 	streq	r0, [r6], #-0
 a60:	0000096b 	andeq	r0, r0, fp, ror #18
 a64:	095a0406 	ldmdbeq	sl, {r1, r2, sl}^
 a68:	04060000 	streq	r0, [r6], #-0
 a6c:	00000949 	andeq	r0, r0, r9, asr #18
 a70:	00029326 	andeq	r9, r2, r6, lsr #6
 a74:	0f100100 	svceq	0x00100100
 a78:	0000008d 	andeq	r0, r0, sp, lsl #1
 a7c:	00000000 	andeq	r0, r0, r0
 a80:	00000014 	andeq	r0, r0, r4, lsl r0
 a84:	a9219c01 	stmdbge	r1!, {r0, sl, fp, ip, pc}
 a88:	01000001 	tsteq	r0, r1
 a8c:	014d0e11 	cmpeq	sp, r1, lsl lr
 a90:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
unsigned long start_of_heap_get(void){
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
	return (unsigned long)&_sheap;
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
}
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
int main(void){
  14:	0b0b0024 	bleq	2c00ac <main+0x2c0098>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	0008030b 	andeq	r0, r8, fp, lsl #6
  28:	00350400 	eorseq	r0, r5, r0, lsl #8
  2c:	00001349 	andeq	r1, r0, r9, asr #6
  30:	03001605 	movweq	r1, #1541	; 0x605
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  34:	3b0b3a0e 	blcc	2ce874 <main+0x2ce860>
  38:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  40:	0b0b000f 	bleq	2c0084 <main+0x2c0070>
  44:	00001349 	andeq	r1, r0, r9, asr #6
	*scb_cpacr |= SCB_CPACR_CP10_CP11_EN; //Enable ARM's FPU
  48:	03001307 	movweq	r1, #775	; 0x307
  4c:	00193c0e 	andseq	r3, r9, lr, lsl #24
  50:	00160800 	andseq	r0, r6, r0, lsl #16
  54:	0b3a0e03 	bleq	e83868 <main+0xe83854>
	led_init();
  58:	0b39053b 	bleq	e4154c <main+0xe41538>
	uart_init(CONFIG_UART_BAUD_RATE);
  5c:	00001349 	andeq	r1, r0, r9, asr #6
  60:	0b011709 	bleq	45c8c <main+0x45c78>
	button_init();
  64:	3b0b3a0b 	blcc	2ce898 <main+0x2ce884>
	printf("The start of the HEAP segment: 0x%08X\n", start_of_heap_get());
  68:	010b390b 	tsteq	fp, fp, lsl #18
  6c:	0a000013 	beq	c0 <.debug_abbrev+0xc0>
  70:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	dynamic_arr_1 = (uint32_t *)malloc(sizeof(uint32_t)*10);
  74:	0b3b0b3a 	bleq	ec2d64 <main+0xec2d50>
  78:	13490b39 	movtne	r0, #39737	; 0x9b39
  7c:	010b0000 	mrseq	r0, (UNDEF: 11)
	for(i = 0; i < 10; i++){
  80:	01134901 	tsteq	r3, r1, lsl #18
		dynamic_arr_1[i] = static_arr_1[i];
  84:	0c000013 	stceq	0, cr0, [r0], {19}
  88:	13490021 	movtne	r0, #36897	; 0x9021
  8c:	00000b2f 	andeq	r0, r0, pc, lsr #22
  90:	0b01130d 	bleq	44ccc <main+0x44cb8>
  94:	3b0b3a0b 	blcc	2ce8c8 <main+0x2ce8b4>
  98:	010b390b 	tsteq	fp, fp, lsl #18
	for(i = 0; i < 10; i++){
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  a4:	0b3b0b3a 	bleq	ec2d94 <main+0xec2d80>
	dynamic_arr_2 = (uint16_t *)malloc(sizeof(uint16_t)*4);
  a8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ac:	00000b38 	andeq	r0, r0, r8, lsr fp
  b0:	0b000f0f 	bleq	3cf4 <main+0x3ce0>
	for(i = 0; i < 4; i++){
  b4:	1000000b 	andne	r0, r0, fp
		dynamic_arr_2[i] = static_arr_2[i];
  b8:	13490026 	movtne	r0, #36902	; 0x9026
  bc:	13110000 	tstne	r1, #0
  c0:	0b0e0301 	bleq	380ccc <main+0x380cb8>
  c4:	3b0b3a0b 	blcc	2ce8f8 <main+0x2ce8e4>
  c8:	010b390b 	tsteq	fp, fp, lsl #18
  cc:	12000013 	andne	r0, r0, #19
	for(i = 0; i < 4; i++){
  d0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  d4:	0b3b0b3a 	bleq	ec2dc4 <main+0xec2db0>
  d8:	13490b39 	movtne	r0, #39737	; 0x9b39
	printf("\n dynamic_arr_1[ ] = {\n");
  dc:	00000b38 	andeq	r0, r0, r8, lsr fp
  e0:	03011313 	movweq	r1, #4883	; 0x1313
	for(i = 0; i < 10; i++){
  e4:	3a050b0e 	bcc	142d24 <main+0x142d10>
		printf("0x%08X\n", dynamic_arr_1[i]);
  e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  ec:	0013010b 	andseq	r0, r3, fp, lsl #2
  f0:	000d1400 	andeq	r1, sp, r0, lsl #8
  f4:	0b3a0e03 	bleq	e83908 <main+0xe838f4>
  f8:	0b390b3b 	bleq	e42dec <main+0xe42dd8>
	for(i = 0; i < 10; i++){
  fc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 100:	15150000 	ldrne	r0, [r5, #-0]
 104:	00192700 	andseq	r2, r9, r0, lsl #14
	printf("}\n");
 108:	01151600 	tsteq	r5, r0, lsl #12
	printf("\n dynamic_arr_2[ ] = {\n");
 10c:	13491927 	movtne	r1, #39207	; 0x9927
 110:	00001301 	andeq	r1, r0, r1, lsl #6
	for(i = 0; i < 4; i++){
 114:	49000517 	stmdbmi	r0, {r0, r1, r2, r4, r8, sl}
		printf("0x%04X\n", dynamic_arr_2[i]);
 118:	18000013 	stmdane	r0, {r0, r1, r4}
 11c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 120:	0b3a050b 	bleq	e81554 <main+0xe81540>
 124:	0b39053b 	bleq	e41618 <main+0xe41604>
 128:	00001301 	andeq	r1, r0, r1, lsl #6
	for(i = 0; i < 4; i++){
 12c:	03000d19 	movweq	r0, #3353	; 0xd19
 130:	3b0b3a0e 	blcc	2ce970 <main+0x2ce95c>
 134:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	printf("}\n");
 138:	000b3813 	andeq	r3, fp, r3, lsl r8
	free(dynamic_arr_1);
 13c:	000d1a00 	andeq	r1, sp, r0, lsl #20
 140:	0b3a0e03 	bleq	e83954 <main+0xe83940>
	dynamic_arr_3 = (uint8_t *)malloc(sizeof(uint16_t)*4);
 144:	0b39053b 	bleq	e41638 <main+0xe41624>
 148:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
	for(i = 0; i < 4; i++){
 14c:	131b0000 	tstne	fp, #0
 150:	0b0e0301 	bleq	380d5c <main+0x380d48>
		dynamic_arr_3[i] = static_arr_3[i];
 154:	3b0b3a0b 	blcc	2ce988 <main+0x2ce974>
 158:	010b3905 	tsteq	fp, r5, lsl #18
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0b0b0113 	bleq	2c05b4 <main+0x2c05a0>
 164:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for(i = 0; i < 4; i++){
 168:	13010b39 	movwne	r0, #6969	; 0x1b39
 16c:	171d0000 	ldrne	r0, [sp, -r0]
 170:	3a0b0b01 	bcc	2c2d7c <main+0x2c2d68>
	printf("\n dynamic_arr_3[ ] = {\n");
 174:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	0013010b 	andseq	r0, r3, fp, lsl #2
	for(i = 0; i < 4; i++){
 17c:	000d1e00 	andeq	r1, sp, r0, lsl #28
		printf("0x%02X\n", dynamic_arr_3[i]);
 180:	0b3a0e03 	bleq	e83994 <main+0xe83980>
 184:	0b39053b 	bleq	e41678 <main+0xe41664>
 188:	00001349 	andeq	r1, r0, r9, asr #6
 18c:	2701151f 	smladcs	r1, pc, r5, r1	; <UNPREDICTABLE>
 190:	00130119 	andseq	r0, r3, r9, lsl r1
	for(i = 0; i < 4; i++){
 194:	00342000 	eorseq	r2, r4, r0
 198:	0b3a0e03 	bleq	e839ac <main+0xe83998>
 19c:	0b39053b 	bleq	e41690 <main+0xe4167c>
	printf("}\n");
 1a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
	free(dynamic_arr_2);
 1a4:	0000193c 	andeq	r1, r0, ip, lsr r9
 1a8:	03003421 	movweq	r3, #1057	; 0x421
	free(dynamic_arr_3);
 1ac:	3b0b3a0e 	blcc	2ce9ec <main+0x2ce9d8>
		led_set();
 1b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		for(i = 0; i < 50000; i++){ }
 1b4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 1b8:	22000019 	andcs	r0, r0, #25
 1bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1c0:	0b3b0b3a 	bleq	ec2eb0 <main+0xec2e9c>
 1c4:	13490b39 	movtne	r0, #39737	; 0x9b39
 1c8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
		led_clear();
 1cc:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
		for(i = 0; i < 50000; i++){ }
 1d0:	03193f01 	tsteq	r9, #1, 30
 1d4:	3b0b3a0e 	blcc	2cea14 <main+0x2cea00>
 1d8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1dc:	11134919 	tstne	r3, r9, lsl r9
 1e0:	40061201 	andmi	r1, r6, r1, lsl #4
		led_set();
 1e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1e8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ec:	03003424 	movweq	r3, #1060	; 0x424
 1f0:	3b0b3a0e 	blcc	2cea30 <main+0x2cea1c>
 1f4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1f8:	00180213 	andseq	r0, r8, r3, lsl r2
 1fc:	00342500 	eorseq	r2, r4, r0, lsl #10
 200:	0b3a0803 	bleq	e82214 <main+0xe82200>
 204:	0b390b3b 	bleq	e42ef8 <main+0xe42ee4>
 208:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 20c:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
 210:	03193f01 	tsteq	r9, #1, 30
 214:	3b0b3a0e 	blcc	2cea54 <main+0x2cea40>
 218:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 21c:	11134919 	tstne	r3, r9, lsl r9
 220:	40061201 	andmi	r1, r6, r1, lsl #4
 224:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 228:	Address 0x0000000000000228 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
unsigned long start_of_heap_get(void){
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
	return (unsigned long)&_sheap;
   4:	00000002 	andeq	r0, r0, r2
}
   8:	00040000 	andeq	r0, r4, r0
	...
int main(void){
  14:	00000218 	andeq	r0, r0, r8, lsl r2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
unsigned long start_of_heap_get(void){
   0:	00000374 	andeq	r0, r0, r4, ror r3
	return (unsigned long)&_sheap;
   4:	01d50003 	bicseq	r0, r5, r3
}
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
int main(void){
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	6f626c2f 	svcvs	0x00626c2f
  24:	6e616467 	cdpvs	4, 6, cr6, cr1, cr7, {3}
  28:	702f766f 	eorvc	r7, pc, pc, ror #12
  2c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  30:	2f736d61 	svccs	0x00736d61
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  34:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
  38:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  3c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  40:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  44:	2d382d69 	ldccs	13, cr2, [r8, #-420]!	; 0xfffffe5c
	*scb_cpacr |= SCB_CPACR_CP10_CP11_EN; //Enable ARM's FPU
  48:	38313032 	ldmdacc	r1!, {r1, r4, r5, ip, sp}
  4c:	2d34712d 	ldfcss	f7, [r4, #-180]!	; 0xffffff4c
  50:	6f6a616d 	svcvs	0x006a616d
  54:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
	led_init();
  58:	6f6e2d6d 	svcvs	0x006e2d6d
	uart_init(CONFIG_UART_BAUD_RATE);
  5c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  60:	2f696261 	svccs	0x00696261
	button_init();
  64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
	printf("The start of the HEAP segment: 0x%08X\n", start_of_heap_get());
  68:	2f656475 	svccs	0x00656475
  6c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  70:	00656e69 	rsbeq	r6, r5, r9, ror #28
	dynamic_arr_1 = (uint32_t *)malloc(sizeof(uint32_t)*10);
  74:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffc0 <main+0xffffffac>
  78:	626c2f65 	rsbvs	r2, ip, #404	; 0x194
  7c:	6164676f 	cmnvs	r4, pc, ror #14
	for(i = 0; i < 10; i++){
  80:	2f766f6e 	svccs	0x00766f6e
		dynamic_arr_1[i] = static_arr_1[i];
  84:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
  88:	736d6172 	cmnvc	sp, #-2147483620	; 0x8000001c
  8c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
  90:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  94:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  98:	61652d65 	cmnvs	r5, r5, ror #26
	for(i = 0; i < 10; i++){
  9c:	382d6962 	stmdacc	sp!, {r1, r5, r6, r8, fp, sp, lr}
  a0:	3130322d 	teqcc	r0, sp, lsr #4
  a4:	34712d38 	ldrbtcc	r2, [r1], #-3384	; 0xfffff2c8
	dynamic_arr_2 = (uint16_t *)malloc(sizeof(uint16_t)*4);
  a8:	6a616d2d 	bvs	185b564 <main+0x185b550>
  ac:	612f726f 			; <UNDEFINED> instruction: 0x612f726f
  b0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
	for(i = 0; i < 4; i++){
  b4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
		dynamic_arr_2[i] = static_arr_2[i];
  b8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
  c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  c4:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
  c8:	6f682f00 	svcvs	0x00682f00
  cc:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; ffffff20 <main+0xffffff0c>
	for(i = 0; i < 4; i++){
  d0:	64676f62 	strbtvs	r6, [r7], #-3938	; 0xfffff09e
  d4:	766f6e61 	strbtvc	r6, [pc], -r1, ror #28
  d8:	6f72702f 	svcvs	0x0072702f
	printf("\n dynamic_arr_1[ ] = {\n");
  dc:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
  e0:	63672f73 	cmnvs	r7, #460	; 0x1cc
	for(i = 0; i < 10; i++){
  e4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
		printf("0x%08X\n", dynamic_arr_1[i]);
  e8:	6f6e2d6d 	svcvs	0x006e2d6d
  ec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  f0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
  f4:	30322d38 	eorscc	r2, r2, r8, lsr sp
  f8:	712d3831 			; <UNDEFINED> instruction: 0x712d3831
	for(i = 0; i < 10; i++){
  fc:	616d2d34 	cmnvs	sp, r4, lsr sp
 100:	2f726f6a 	svccs	0x00726f6a
 104:	2f62696c 	svccs	0x0062696c
	printf("}\n");
 108:	2f636367 	svccs	0x00636367
	printf("\n dynamic_arr_2[ ] = {\n");
 10c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 110:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
	for(i = 0; i < 4; i++){
 114:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
		printf("0x%04X\n", dynamic_arr_2[i]);
 118:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
 11c:	2f312e32 	svccs	0x00312e32
 120:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 124:	00656475 	rsbeq	r6, r5, r5, ror r4
 128:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 74 <.debug_line+0x74>
	for(i = 0; i < 4; i++){
 12c:	626c2f65 	rsbvs	r2, ip, #404	; 0x194
 130:	6164676f 	cmnvs	r4, pc, ror #14
 134:	2f766f6e 	svccs	0x00766f6e
	printf("}\n");
 138:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
	free(dynamic_arr_1);
 13c:	736d6172 	cmnvc	sp, #-2147483620	; 0x8000001c
 140:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
	dynamic_arr_3 = (uint8_t *)malloc(sizeof(uint16_t)*4);
 144:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 148:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
	for(i = 0; i < 4; i++){
 14c:	61652d65 	cmnvs	r5, r5, ror #26
 150:	382d6962 	stmdacc	sp!, {r1, r5, r6, r8, fp, sp, lr}
		dynamic_arr_3[i] = static_arr_3[i];
 154:	3130322d 	teqcc	r0, sp, lsr #4
 158:	34712d38 	ldrbtcc	r2, [r1], #-3384	; 0xfffff2c8
 15c:	6a616d2d 	bvs	185b618 <main+0x185b604>
 160:	612f726f 			; <UNDEFINED> instruction: 0x612f726f
 164:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
	for(i = 0; i < 4; i++){
 168:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 16c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 170:	636e692f 	cmnvs	lr, #770048	; 0xbc000
	printf("\n dynamic_arr_3[ ] = {\n");
 174:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 178:	616d0000 	cmnvs	sp, r0
	for(i = 0; i < 4; i++){
 17c:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
		printf("0x%02X\n", dynamic_arr_3[i]);
 180:	00000000 	andeq	r0, r0, r0
 184:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 188:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 18c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 190:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
	for(i = 0; i < 4; i++){
 194:	00000100 	andeq	r0, r0, r0, lsl #2
 198:	6b636f6c 	blvs	18dbf50 <main+0x18dbf3c>
 19c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
	printf("}\n");
 1a0:	745f0000 	ldrbvc	r0, [pc], #-0	; 1a8 <.debug_line+0x1a8>
	free(dynamic_arr_2);
 1a4:	73657079 	cmnvc	r5, #121	; 0x79
 1a8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
	free(dynamic_arr_3);
 1ac:	74730000 	ldrbtvc	r0, [r3], #-0
		led_set();
 1b0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
		for(i = 0; i < 50000; i++){ }
 1b4:	0300682e 	movweq	r6, #2094	; 0x82e
 1b8:	65720000 	ldrbvs	r0, [r2, #-0]!
 1bc:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 1c0:	00020068 	andeq	r0, r2, r8, rrx
 1c4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
 1c8:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
		led_clear();
 1cc:	00040068 	andeq	r0, r4, r8, rrx
		for(i = 0; i < 50000; i++){ }
 1d0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 1d4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 1d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 1dc:	05000000 	streq	r0, [r0, #-0]
 1e0:	02050026 	andeq	r0, r5, #38	; 0x26
		led_set();
 1e4:	00000000 	andeq	r0, r0, r0
 1e8:	05010f03 	streq	r0, [r1, #-3843]	; 0xfffff0fd
 1ec:	01053009 	tsteq	r5, r9
 1f0:	030f0521 	movweq	r0, #62753	; 0xf521
 1f4:	1105740a 	tstne	r5, sl, lsl #8
 1f8:	1005bb3d 	andne	fp, r5, sp, lsr fp
 1fc:	420d0575 	andmi	r0, sp, #490733568	; 0x1d400000
 200:	2f840205 	svccs	0x00840205
 204:	1e05314c 	adfnesm	f3, f5, #4.0
 208:	5a080576 	bpl	2017e8 <main+0x2017d4>
 20c:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 210:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 214:	10052103 	andne	r2, r5, r3, lsl #2
 218:	03040200 	movweq	r0, #16896	; 0x4200
 21c:	00220520 	eoreq	r0, r2, r0, lsr #10
 220:	4a030402 	bmi	c1230 <main+0xc121c>
 224:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 228:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 22c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 230:	0f051f03 	svceq	0x00051f03
 234:	01040200 	mrseq	r0, R12_usr
 238:	0002053c 	andeq	r0, r2, ip, lsr r5
 23c:	20010402 	andcs	r0, r1, r2, lsl #8
 240:	05321e05 	ldreq	r1, [r2, #-3589]!	; 0xfffff1fb
 244:	02055a08 	andeq	r5, r5, #8, 20	; 0x8000
 248:	0022052e 	eoreq	r0, r2, lr, lsr #10
 24c:	21030402 	tstcs	r3, r2, lsl #8
 250:	02001005 	andeq	r1, r0, #5
 254:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 258:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 25c:	14054a03 	strne	r4, [r5], #-2563	; 0xfffff5fd
 260:	03040200 	movweq	r0, #16896	; 0x4200
 264:	00150566 	andseq	r0, r5, r6, ror #10
 268:	1f030402 	svcne	0x00030402
 26c:	02000f05 	andeq	r0, r0, #5, 30
 270:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 274:	04020002 	streq	r0, [r2], #-2
 278:	05322001 	ldreq	r2, [r2, #-1]!
 27c:	02053d08 	andeq	r3, r5, #8, 26	; 0x200
 280:	0023052e 	eoreq	r0, r3, lr, lsr #10
 284:	21030402 	tstcs	r3, r2, lsl #8
 288:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 28c:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
 290:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 294:	0f055703 	svceq	0x00055703
 298:	01040200 	mrseq	r0, R12_usr
 29c:	0002053c 	andeq	r0, r2, ip, lsr r5
 2a0:	20010402 	andcs	r0, r1, r2, lsl #8
 2a4:	08053e31 	stmdaeq	r5, {r0, r4, r5, r9, sl, fp, ip, sp}
 2a8:	2e02053d 	mcrcs	5, 0, r0, cr2, cr13, {1}
 2ac:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 2b0:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 2b4:	04020003 	streq	r0, [r2], #-3
 2b8:	15055803 	strne	r5, [r5, #-2051]	; 0xfffff7fd
 2bc:	03040200 	movweq	r0, #16896	; 0x4200
 2c0:	000f0549 	andeq	r0, pc, r9, asr #10
 2c4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2c8:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 2cc:	31200104 			; <UNDEFINED> instruction: 0x31200104
 2d0:	3e1d053e 	mrccc	5, 0, r0, cr13, cr14, {1}
 2d4:	055a0805 	ldrbeq	r0, [sl, #-2053]	; 0xfffff7fb
 2d8:	22052e02 	andcs	r2, r5, #2, 28
 2dc:	03040200 	movweq	r0, #16896	; 0x4200
 2e0:	00100521 	andseq	r0, r0, r1, lsr #10
 2e4:	20030402 	andcs	r0, r3, r2, lsl #8
 2e8:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 2ec:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
 2f0:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 2f4:	15055803 	strne	r5, [r5, #-2051]	; 0xfffff7fd
 2f8:	03040200 	movweq	r0, #16896	; 0x4200
 2fc:	000f051f 	andeq	r0, pc, pc, lsl r5	; <UNPREDICTABLE>
 300:	3c010402 	cfstrscc	mvf0, [r1], {2}
 304:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 308:	32200104 	eorcc	r0, r0, #4, 2
 30c:	053d0805 	ldreq	r0, [sp, #-2053]!	; 0xfffff7fb
 310:	23052e02 	movwcs	r2, #24066	; 0x5e02
 314:	03040200 	movweq	r0, #16896	; 0x4200
 318:	00030521 	andeq	r0, r3, r1, lsr #10
 31c:	58030402 	stmdapl	r3, {r1, sl}
 320:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 324:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 328:	0402000f 	streq	r0, [r2], #-15
 32c:	02053c01 	andeq	r3, r5, #256	; 0x100
 330:	01040200 	mrseq	r0, R12_usr
 334:	3d3e3120 	ldfccs	f3, [lr, #-128]!	; 0xffffff80
 338:	053f0305 	ldreq	r0, [pc, #-773]!	; 3b <.debug_line+0x3b>
 33c:	03052f09 	movweq	r2, #24329	; 0x5f09
 340:	001a052e 	andseq	r0, sl, lr, lsr #10
 344:	20030402 	andcs	r0, r3, r2, lsl #8
 348:	02001005 	andeq	r1, r0, #5
 34c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 350:	04020003 	streq	r0, [r2], #-3
 354:	054b2001 	strbeq	r2, [fp, #-1]
 358:	03052f09 	movweq	r2, #24329	; 0x5f09
 35c:	001a052e 	andseq	r0, sl, lr, lsr #10
 360:	20030402 	andcs	r0, r3, r2, lsl #8
 364:	02001005 	andeq	r1, r0, #5
 368:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 36c:	04020003 	streq	r0, [r2], #-3
 370:	02472001 	subeq	r2, r7, #1
 374:	0101001a 	tsteq	r1, sl, lsl r0

Disassembly of section .debug_str:

00000000 <.debug_str>:
unsigned long start_of_heap_get(void){
   0:	6f73645f 	svcvs	0x0073645f
	return (unsigned long)&_sheap;
   4:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
}
   8:	00656c64 	rsbeq	r6, r5, r4, ror #24
   c:	7a69735f 	bvc	1a5cd90 <main+0x1a5cd7c>
  10:	725f0065 	subsvc	r0, pc, #101	; 0x65
int main(void){
  14:	34646e61 	strbtcc	r6, [r4], #-3681	; 0xfffff19f
  18:	655f0038 	ldrbvs	r0, [pc, #-56]	; ffffffe8 <main+0xffffffd4>
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  1c:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
  20:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
  24:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff12c <main+0xfffff118>
  28:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
  2c:	5f00745f 	svcpl	0x0000745f
  30:	61746164 	cmnvs	r4, r4, ror #2
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  34:	6e796400 	cdpvs	4, 7, cr6, cr9, cr0, {0}
  38:	63696d61 	cmnvs	r9, #6208	; 0x1840
  3c:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  40:	5f00325f 	svcpl	0x0000325f
  44:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
	*scb_cpacr |= SCB_CPACR_CP10_CP11_EN; //Enable ARM's FPU
  48:	5f626d6f 	svcpl	0x00626d6f
  4c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  50:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
  54:	74727363 	ldrbtvc	r7, [r2], #-867	; 0xfffffc9d
	led_init();
  58:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
	uart_init(CONFIG_UART_BAUD_RATE);
  5c:	6174735f 	cmnvs	r4, pc, asr r3
  60:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
	button_init();
  64:	20676e6f 	rsbcs	r6, r7, pc, ror #28
	printf("The start of the HEAP segment: 0x%08X\n", start_of_heap_get());
  68:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  6c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  70:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
	dynamic_arr_1 = (uint32_t *)malloc(sizeof(uint32_t)*10);
  74:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  78:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
  7c:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
	for(i = 0; i < 10; i++){
  80:	5f00657a 	svcpl	0x0000657a
		dynamic_arr_1[i] = static_arr_1[i];
  84:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
  88:	5f656c61 	svcpl	0x00656c61
  8c:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; fffffec4 <main+0xfffffeb0>
  90:	6f747262 	svcvs	0x00747262
  94:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
  98:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
	for(i = 0; i < 10; i++){
  9c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; a4 <.debug_str+0xa4>
  a0:	65735f6d 	ldrbvs	r5, [r3, #-3949]!	; 0xfffff093
  a4:	6f6c0063 	svcvs	0x006c0063
	dynamic_arr_2 = (uint16_t *)malloc(sizeof(uint16_t)*4);
  a8:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
  ac:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
	for(i = 0; i < 4; i++){
  b4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
		dynamic_arr_2[i] = static_arr_2[i];
  b8:	63206465 			; <UNDEFINED> instruction: 0x63206465
  bc:	00726168 	rsbseq	r6, r2, r8, ror #2
  c0:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
  c4:	625f0066 	subsvs	r0, pc, #102	; 0x66
  c8:	00657361 	rsbeq	r7, r5, r1, ror #6
  cc:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
	for(i = 0; i < 4; i++){
  d0:	756f685f 	strbvc	r6, [pc, #-2143]!	; fffff879 <main+0xfffff865>
  d4:	5f5f0072 	svcpl	0x005f0072
  d8:	5f006673 	svcpl	0x00006673
	printf("\n dynamic_arr_1[ ] = {\n");
  dc:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; fffff275 <main+0xfffff261>
  e0:	5f746978 	svcpl	0x00746978
	for(i = 0; i < 10; i++){
  e4:	73677261 	cmnvc	r7, #268435462	; 0x10000006
		printf("0x%08X\n", dynamic_arr_1[i]);
  e8:	6f635f00 	svcvs	0x00635f00
  ec:	65696b6f 	strbvs	r6, [r9, #-2927]!	; 0xfffff491
  f0:	735f5f00 	cmpvc	pc, #0, 30
  f4:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
  f8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
	for(i = 0; i < 10; i++){
  fc:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 100:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 104:	7367616c 	cmnvc	r7, #108, 2
	printf("}\n");
 108:	73695f00 	cmnvc	r9, #0, 30
	printf("\n dynamic_arr_2[ ] = {\n");
 10c:	6178635f 	cmnvs	r8, pc, asr r3
 110:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
	for(i = 0; i < 4; i++){
 114:	006e6964 	rsbeq	r6, lr, r4, ror #18
		printf("0x%04X\n", dynamic_arr_2[i]);
 118:	6b6c625f 	blvs	1b18a9c <main+0x1b18a88>
 11c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 120:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 124:	5f363174 	svcpl	0x00363174
 128:	635f0074 	cmpvs	pc, #116	; 0x74
	for(i = 0; i < 4; i++){
 12c:	75627476 	strbvc	r7, [r2, #-1142]!	; 0xfffffb8a
 130:	6f5f0066 	svcvs	0x005f0066
 134:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
	printf("}\n");
 138:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; ffffff70 <main+0xffffff5c>
	free(dynamic_arr_1);
 13c:	74727362 	ldrbtvc	r7, [r2], #-866	; 0xfffffc9e
 140:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
	dynamic_arr_3 = (uint8_t *)malloc(sizeof(uint16_t)*4);
 144:	6174735f 	cmnvs	r4, pc, asr r3
 148:	73006574 	movwvc	r6, #1396	; 0x574
	for(i = 0; i < 4; i++){
 14c:	635f6263 	cmpvs	pc, #805306374	; 0x30000006
 150:	72636170 	rsbvc	r6, r3, #112, 2
		dynamic_arr_3[i] = static_arr_3[i];
 154:	626d5f00 	rsbvs	r5, sp, #0, 30
 158:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
 15c:	6174735f 	cmnvs	r4, pc, asr r3
 160:	5f006574 	svcpl	0x00006574
 164:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
	for(i = 0; i < 4; i++){
 168:	5f007367 	svcpl	0x00007367
 16c:	00736e66 	rsbseq	r6, r3, r6, ror #28
 170:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	printf("\n dynamic_arr_3[ ] = {\n");
 174:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
 178:	5f00745f 	svcpl	0x0000745f
	for(i = 0; i < 4; i++){
 17c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
		printf("0x%02X\n", dynamic_arr_3[i]);
 180:	6c665f00 	stclvs	15, cr5, [r6], #-0
 184:	5f6b636f 	svcpl	0x006b636f
 188:	735f0074 	cmpvc	pc, #116	; 0x74
 18c:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
 190:	425f0072 	subsmi	r0, pc, #114	; 0x72
	for(i = 0; i < 4; i++){
 194:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
 198:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
 19c:	616d6d61 	cmnvs	sp, r1, ror #26
	printf("}\n");
 1a0:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
	free(dynamic_arr_2);
 1a4:	6d61676e 	stclvs	7, cr6, [r1, #-440]!	; 0xfffffe48
 1a8:	68735f00 	ldmdavs	r3!, {r8, r9, sl, fp, ip, lr}^
	free(dynamic_arr_3);
 1ac:	00706165 	rsbseq	r6, r0, r5, ror #2
		led_set();
 1b0:	6165725f 	cmnvs	r5, pc, asr r2
		for(i = 0; i < 50000; i++){ }
 1b4:	725f0064 	subsvc	r0, pc, #100	; 0x64
 1b8:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 1bc:	006b5f74 	rsbeq	r5, fp, r4, ror pc
 1c0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 1c4:	736e7500 	cmnvc	lr, #0, 10
 1c8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
		led_clear();
 1cc:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
		for(i = 0; i < 50000; i++){ }
 1d0:	5f5f0074 	svcpl	0x005f0074
 1d4:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
 1d8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 1dc:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
 1e0:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
		led_set();
 1e4:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
 1e8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 1ec:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 1f0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 1f4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 1f8:	5f00746e 	svcpl	0x0000746e
 1fc:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 200:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
 204:	0073626f 	rsbseq	r6, r3, pc, ror #4
 208:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 20c:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 210:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 214:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 218:	5f00746e 	svcpl	0x0000746e
 21c:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
 220:	00307469 	eorseq	r7, r0, r9, ror #8
 224:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 228:	5f6c616e 	svcpl	0x006c616e
 22c:	00667562 	rsbeq	r7, r6, r2, ror #10
 230:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 234:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 238:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 23c:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 240:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 244:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
 248:	5f006863 	svcpl	0x00006863
 24c:	4b434f4c 	blmi	10d3f84 <main+0x10d3f70>
 250:	6d00545f 	cfstrsvs	mvf5, [r0, #-380]	; 0xfffffe84
 254:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
 258:	69770063 	ldmdbvs	r7!, {r0, r1, r5, r6}^
 25c:	745f746e 	ldrbvc	r7, [pc], #-1134	; 264 <.debug_str+0x264>
 260:	6f6c5f00 	svcvs	0x006c5f00
 264:	5f006b63 	svcpl	0x00006b63
 268:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 26c:	5f003273 	svcpl	0x00003273
 270:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 274:	5f5f0065 	svcpl	0x005f0065
 278:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 27c:	00726165 	rsbseq	r6, r2, r5, ror #2
 280:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 284:	756f6420 	strbvc	r6, [pc, #-1056]!	; fffffe6c <main+0xfffffe58>
 288:	00656c62 	rsbeq	r6, r5, r2, ror #24
 28c:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 290:	73006674 	movwvc	r6, #1652	; 0x674
 294:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 298:	5f666f5f 	svcpl	0x00666f5f
 29c:	70616568 	rsbvc	r6, r1, r8, ror #10
 2a0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
 2a4:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 2ac <.debug_str+0x2ac>
 2a8:	6f6d5f6d 	svcvs	0x006d5f6d
 2ac:	615f006e 	cmpvs	pc, lr, rrx
 2b0:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
 2b4:	75730074 	ldrbvc	r0, [r3, #-116]!	; 0xffffff8c
 2b8:	74706f62 	ldrbtvc	r6, [r0], #-3938	; 0xfffff09e
 2bc:	00677261 	rsbeq	r7, r7, r1, ror #4
 2c0:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xfffff0a1
 2c4:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
 2c8:	5f007469 	svcpl	0x00007469
 2cc:	5f66666f 	svcpl	0x0066666f
 2d0:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 2d4:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
 2d8:	00747369 	rsbseq	r7, r4, r9, ror #6
 2dc:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
 2e0:	5f626d6f 	svcpl	0x00626d6f
 2e4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 2e8:	79640065 	stmdbvc	r4!, {r0, r2, r5, r6}^
 2ec:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 2f0:	72615f63 	rsbvc	r5, r1, #396	; 0x18c
 2f4:	00315f72 	eorseq	r5, r1, r2, ror pc
 2f8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 2fc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 300:	61686320 	cmnvs	r8, r0, lsr #6
 304:	79640072 	stmdbvc	r4!, {r1, r4, r5, r6}^
 308:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 30c:	72615f63 	rsbvc	r5, r1, #396	; 0x18c
 310:	00335f72 	eorseq	r5, r3, r2, ror pc
 314:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 318:	5f685f00 	svcpl	0x00685f00
 31c:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
 320:	6873006f 	ldmdavs	r3!, {r0, r1, r2, r3, r5, r6}^
 324:	2074726f 	rsbscs	r7, r4, pc, ror #4
 328:	00746e69 	rsbseq	r6, r4, r9, ror #28
 32c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 330:	6164795f 	cmnvs	r4, pc, asr r9
 334:	5f5f0079 	svcpl	0x005f0079
 338:	66756273 			; <UNDEFINED> instruction: 0x66756273
 33c:	6f695f00 	svcvs	0x00695f00
 340:	5f007362 	svcpl	0x00007362
 344:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
 348:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 23c <.debug_str+0x23c>
 34c:	61747362 	cmnvs	r4, r2, ror #6
 350:	745f6574 	ldrbvc	r6, [pc], #-1396	; 358 <.debug_str+0x358>
 354:	735f5f00 	cmpvc	pc, #0, 30
 358:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 35c:	626d5f00 	rsbvs	r5, sp, #0, 30
 360:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 364:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
 368:	2f656d6f 	svccs	0x00656d6f
 36c:	676f626c 	strbvs	r6, [pc, -ip, ror #4]!
 370:	6f6e6164 	svcvs	0x006e6164
 374:	69672f76 	stmdbvs	r7!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 378:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
 37c:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 380:	6c2f7374 	stcvs	3, cr7, [pc], #-464	; 1b8 <.debug_str+0x1b8>
 384:	755f6261 	ldrbvc	r6, [pc, #-609]	; 12b <.debug_str+0x12b>
 388:	735f7270 	cmpvc	pc, #112, 4
 38c:	635f6372 	cmpvs	pc, #-939524095	; 0xc8000001
 390:	2f65646f 	svccs	0x0065646f
 394:	5f62616c 	svcpl	0x0062616c
 398:	5f727075 	svcpl	0x00727075
 39c:	63675f34 	cmnvs	r7, #52, 30	; 0xd0
 3a0:	34302f63 	ldrtcc	r2, [r0], #-3939	; 0xfffff09d
 3a4:	002f355f 	eoreq	r3, pc, pc, asr r5	; <UNPREDICTABLE>
 3a8:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
 3ac:	735f6e65 	cmpvc	pc, #1616	; 0x650
 3b0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 3b4:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 3b8:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
 3bc:	5f00646e 	svcpl	0x0000646e
 3c0:	61636f6c 	cmnvs	r3, ip, ror #30
 3c4:	5f00656c 	svcpl	0x0000656c
 3c8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 3cc:	70756e61 	rsbsvc	r6, r5, r1, ror #28
 3d0:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 3d4:	63657073 	cmnvs	r5, #115	; 0x73
 3d8:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
 3dc:	6f6c5f64 	svcvs	0x006c5f64
 3e0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 3e4:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
 3e8:	6d5f006f 	ldclvs	0, cr0, [pc, #-444]	; 234 <.debug_str+0x234>
 3ec:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
 3f0:	725f0073 	subsvc	r0, pc, #115	; 0x73
 3f4:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
 3f8:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
 3fc:	5f006465 	svcpl	0x00006465
 400:	756f635f 	strbvc	r6, [pc, #-863]!	; a9 <.debug_str+0xa9>
 404:	5f00746e 	svcpl	0x0000746e
 408:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 40c:	5f5f006b 	svcpl	0x005f006b
 410:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 414:	735f0065 	cmpvc	pc, #101	; 0x65
 418:	006b6565 	rsbeq	r6, fp, r5, ror #10
 41c:	706d695f 	rsbvc	r6, sp, pc, asr r9
 420:	5f657275 	svcpl	0x00657275
 424:	00727470 	rsbseq	r7, r2, r0, ror r4
 428:	6f70665f 	svcvs	0x0070665f
 42c:	00745f73 	rsbseq	r5, r4, r3, ror pc
 430:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 434:	63006f6e 	movwvs	r6, #3950	; 0xf6e
 438:	00726168 	rsbseq	r6, r2, r8, ror #2
 43c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 440:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
 444:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff54c <main+0xfffff538>
 448:	31746e69 	cmncc	r4, r9, ror #28
 44c:	00745f36 	rsbseq	r5, r4, r6, lsr pc
 450:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 454:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 458:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
 45c:	6e5f0074 	mrcvs	0, 2, r0, cr15, cr4, {3}
 460:	00747865 	rsbseq	r7, r4, r5, ror #16
 464:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 468:	5f6b6f74 	svcpl	0x006b6f74
 46c:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
 470:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
 474:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 478:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
 47c:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 480:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
 484:	7300315f 	movwvc	r3, #351	; 0x15f
 488:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 48c:	72615f63 	rsbvc	r5, r1, #396	; 0x18c
 490:	00325f72 	eorseq	r5, r2, r2, ror pc
 494:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 498:	615f6369 	cmpvs	pc, r9, ror #6
 49c:	335f7272 	cmpcc	pc, #536870919	; 0x20000007
 4a0:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 4a4:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
 4a8:	322e3820 	eorcc	r3, lr, #32, 16	; 0x200000
 4ac:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 4b0:	31383130 	teqcc	r8, r0, lsr r1
 4b4:	20333132 	eorscs	r3, r3, r2, lsr r1
 4b8:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 4bc:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 4c0:	675b2029 	ldrbvs	r2, [fp, -r9, lsr #32]
 4c4:	382d6363 	stmdacc	sp!, {r0, r1, r5, r6, r8, r9, sp, lr}
 4c8:	6172622d 	cmnvs	r2, sp, lsr #4
 4cc:	2068636e 	rsbcs	r6, r8, lr, ror #6
 4d0:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 4d4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 4d8:	37363220 	ldrcc	r3, [r6, -r0, lsr #4]!
 4dc:	5d343730 	ldcpl	7, cr3, [r4, #-192]!	; 0xffffff40
 4e0:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
 4e4:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
 4e8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 4ec:	376d2d78 			; <UNDEFINED> instruction: 0x376d2d78
 4f0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 4f4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 4f8:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 4fc:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 500:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 504:	7261683d 	rsbvc	r6, r1, #3997696	; 0x3d0000
 508:	6d2d2064 	stcvs	0, cr2, [sp, #-400]!	; 0xfffffe70
 50c:	3d757066 	ldclcc	0, cr7, [r5, #-408]!	; 0xfffffe68
 510:	35767066 	ldrbcc	r7, [r6, #-102]!	; 0xffffff9a
 514:	3631642d 	ldrtcc	r6, [r1], -sp, lsr #8
 518:	616d2d20 	cmnvs	sp, r0, lsr #26
 51c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 520:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 524:	6d2d6537 	cfstr32vs	mvfx6, [sp, #-220]!	; 0xffffff24
 528:	2e70662b 	cdpcs	6, 7, cr6, cr0, cr11, {1}
 52c:	2d207064 	stccs	0, cr7, [r0, #-400]!	; 0xfffffe70
 530:	4f2d2067 	svcmi	0x002d2067
 534:	615f0030 	cmpvs	pc, r0, lsr r0	; <UNPREDICTABLE>
 538:	5f006464 	svcpl	0x00006464
 53c:	6f4c555f 	svcvs	0x004c555f
 540:	5f00676e 	svcpl	0x0000676e
 544:	64746567 	ldrbtvs	r6, [r4], #-1383	; 0xfffffa99
 548:	5f657461 	svcpl	0x00657461
 54c:	00727265 	rsbseq	r7, r2, r5, ror #4
 550:	6f6c675f 	svcvs	0x006c675f
 554:	5f6c6162 	svcpl	0x006c6162
 558:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
 55c:	705f6572 	subsvc	r6, pc, r2, ror r5	; <UNPREDICTABLE>
 560:	75007274 	strvc	r7, [r0, #-628]	; 0xfffffd8c
 564:	33746e69 	cmncc	r4, #1680	; 0x690
 568:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 56c:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 570:	5f646573 	svcpl	0x00646573
 574:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 578:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
 57c:	5f5f0073 	svcpl	0x005f0073
 580:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
 584:	00796164 	rsbseq	r6, r9, r4, ror #2
 588:	756c675f 	strbvc	r6, [ip, #-1887]!	; 0xfffff8a1
 58c:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
 590:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 594:	5f00636f 	svcpl	0x0000636f
 598:	6134366c 	teqvs	r4, ip, ror #12
 59c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 5a0:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 5a4:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
 5a8:	5f00636e 	svcpl	0x0000636e
 5ac:	6675626e 	ldrbtvs	r6, [r5], -lr, ror #4
 5b0:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 5b4:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 5b8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5c0 <.debug_str+0x5c0>
 5bc:	73695f6d 	cmnvc	r9, #436	; 0x1b4
 5c0:	00747364 	rsbseq	r7, r4, r4, ror #6
 5c4:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 5c8:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
 5cc:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 5d0:	5f006675 	svcpl	0x00006675
 5d4:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 5d8:	725f0065 	subsvc	r0, pc, #101	; 0x65
 5dc:	5f003834 	svcpl	0x00003834
 5e0:	6f74626d 	svcvs	0x0074626d
 5e4:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
 5e8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 5ec:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
 5f0:	616d0073 	smcvs	53251	; 0xd003
 5f4:	5f006e69 	svcpl	0x00006e69
 5f8:	5f6d745f 	svcpl	0x006d745f
 5fc:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
 600:	61725f00 	cmnvs	r2, r0, lsl #30
 604:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
 608:	00747865 	rsbseq	r7, r4, r5, ror #16

Disassembly of section .comment:

00000000 <.comment>:
unsigned long start_of_heap_get(void){
   0:	43434700 	movtmi	r4, #14080	; 0x3700
	return (unsigned long)&_sheap;
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
}
   8:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
   c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  10:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
int main(void){
  14:	6d724120 	ldfvse	f4, [r2, #-128]!	; 0xffffff80
  18:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  1c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  20:	72502064 	subsvc	r2, r0, #100	; 0x64
  24:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  28:	73726f73 	cmnvc	r2, #460	; 0x1cc
  2c:	322d3820 	eorcc	r3, sp, #32, 16	; 0x200000
  30:	2d383130 	ldfcss	f3, [r8, #-192]!	; 0xffffff40
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  34:	6d2d3471 	cfstrsvs	mvf3, [sp, #-452]!	; 0xfffffe3c
  38:	726f6a61 	rsbvc	r6, pc, #397312	; 0x61000
  3c:	2e382029 	cdpcs	0, 3, cr2, cr8, cr9, {1}
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  40:	20312e32 	eorscs	r2, r1, r2, lsr lr
  44:	38313032 	ldmdacc	r1!, {r1, r4, r5, ip, sp}
	*scb_cpacr |= SCB_CPACR_CP10_CP11_EN; //Enable ARM's FPU
  48:	33313231 	teqcc	r1, #268435459	; 0x10000003
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <main+0x80a5dc>
	led_init();
  58:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
	uart_init(CONFIG_UART_BAUD_RATE);
  5c:	72622d38 	rsbvc	r2, r2, #56, 26	; 0xe00
  60:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
	button_init();
  64:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
	printf("The start of the HEAP segment: 0x%08X\n", start_of_heap_get());
  68:	6f697369 	svcvs	0x00697369
  6c:	3632206e 	ldrtcc	r2, [r2], -lr, rrx
  70:	34373037 	ldrtcc	r3, [r7], #-55	; 0xffffffc9
	dynamic_arr_1 = (uint32_t *)malloc(sizeof(uint32_t)*10);
  74:	Address 0x0000000000000074 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
unsigned long start_of_heap_get(void){
   0:	0000000c 	andeq	r0, r0, ip
	return (unsigned long)&_sheap;
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  1c:	00000014 	andeq	r0, r0, r4, lsl r0
  20:	87040e41 	strhi	r0, [r4, -r1, asr #28]
  24:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  28:	420d0d43 	andmi	r0, sp, #4288	; 0x10c0
  2c:	00000ec7 	andeq	r0, r0, r7, asr #29
  30:	00000020 	andeq	r0, r0, r0, lsr #32
	const uint16_t static_arr_2[4] = {0xbaba, 0xdede, 0xcece, 0xfefe};
  34:	00000000 	andeq	r0, r0, r0
  38:	00000014 	andeq	r0, r0, r4, lsl r0
  3c:	00000204 	andeq	r0, r0, r4, lsl #4
	const uint8_t static_arr_3[4] = {0xde, 0xad, 0xbe, 0xef};
  40:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  44:	87038504 	strhi	r8, [r3, -r4, lsl #10]
	*scb_cpacr |= SCB_CPACR_CP10_CP11_EN; //Enable ARM's FPU
  48:	41018e02 	tstmi	r1, r2, lsl #28
  4c:	0d41580e 	stcleq	8, cr5, [r1, #-56]	; 0xffffffc8
  50:	00000007 	andeq	r0, r0, r7

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
unsigned long start_of_heap_get(void){
   0:	00003141 	andeq	r3, r0, r1, asr #2
	return (unsigned long)&_sheap;
   4:	61656100 	cmnvs	r5, r0, lsl #2
}
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000027 	andeq	r0, r0, r7, lsr #32
  10:	2d453705 	stclcs	7, cr3, [r5, #-20]	; 0xffffffec
int main(void){
  14:	0d06004d 	stceq	0, cr0, [r6, #-308]	; 0xfffffecc
  18:	02094d07 	andeq	r4, r9, #448	; 0x1c0
	const uint32_t static_arr_1[10] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888, 0x99999999, 0xaaaaaaaa};
  1c:	0412080a 	ldreq	r0, [r2], #-2058	; 0xfffff7f6
  20:	01150114 	tsteq	r5, r4, lsl r1
  24:	01180317 	tsteq	r8, r7, lsl r3
  28:	011a0119 	tsteq	sl, r9, lsl r1
  2c:	061e011c 			; <UNDEFINED> instruction: 0x061e011c
  30:	Address 0x0000000000000030 is out of bounds.

